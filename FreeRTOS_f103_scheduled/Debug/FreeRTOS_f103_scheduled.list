
FreeRTOS_f103_scheduled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009928  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009a38  08009a38  00019a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b98  08009b98  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08009b98  08009b98  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b98  08009b98  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b98  08009b98  00019b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08009ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f10  20000130  08009cd0  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002040  08009cd0  00022040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d2ae  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004594  00000000  00000000  0003d44a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  000419e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ea  00000000  00000000  00043398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c67a  00000000  00000000  00044782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd0c  00000000  00000000  00060dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a0ff  00000000  00000000  00080b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e50  00000000  00000000  0011ac08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00121a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000130 	.word	0x20000130
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a20 	.word	0x08009a20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000134 	.word	0x20000134
 800014c:	08009a20 	.word	0x08009a20

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000014c 	.word	0x2000014c
 800017c:	200001ec 	.word	0x200001ec

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fb27 	bl	80007d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f84d 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8ff 	bl	8000390 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000192:	f000 f8a5 	bl	80002e0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8d1 	bl	800033c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ReadMPU6050 */
  osThreadDef(ReadMPU6050, StartReadMPU6050, osPriorityNormal, 0, 128);
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <main+0x90>)
 800019c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001a0:	461d      	mov	r5, r3
 80001a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadMPU6050Handle = osThreadCreate(osThread(ReadMPU6050), NULL);
 80001ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001b2:	2100      	movs	r1, #0
 80001b4:	4618      	mov	r0, r3
 80001b6:	f007 fd7c 	bl	8007cb2 <osThreadCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a15      	ldr	r2, [pc, #84]	; (8000214 <main+0x94>)
 80001be:	6013      	str	r3, [r2, #0]

  /* definition and creation of CalculatePID */
  osThreadDef(CalculatePID, StartCalculatePID, osPriorityIdle, 0, 128);
 80001c0:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x98>)
 80001c2:	f107 0420 	add.w	r4, r7, #32
 80001c6:	461d      	mov	r5, r3
 80001c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CalculatePIDHandle = osThreadCreate(osThread(CalculatePID), NULL);
 80001d4:	f107 0320 	add.w	r3, r7, #32
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f007 fd69 	bl	8007cb2 <osThreadCreate>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a0e      	ldr	r2, [pc, #56]	; (800021c <main+0x9c>)
 80001e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllESC */
  osThreadDef(ControllESC, StartControllESC, osPriorityIdle, 0, 128);
 80001e6:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <main+0xa0>)
 80001e8:	1d3c      	adds	r4, r7, #4
 80001ea:	461d      	mov	r5, r3
 80001ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllESCHandle = osThreadCreate(osThread(ControllESC), NULL);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2100      	movs	r1, #0
 80001fc:	4618      	mov	r0, r3
 80001fe:	f007 fd58 	bl	8007cb2 <osThreadCreate>
 8000202:	4603      	mov	r3, r0
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <main+0xa4>)
 8000206:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000208:	f007 fd4c 	bl	8007ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x8c>
 800020e:	bf00      	nop
 8000210:	08009a44 	.word	0x08009a44
 8000214:	20000488 	.word	0x20000488
 8000218:	08009a70 	.word	0x08009a70
 800021c:	2000048c 	.word	0x2000048c
 8000220:	08009a98 	.word	0x08009a98
 8000224:	20000490 	.word	0x20000490

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f009 fb1a 	bl	8009870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fc10 	bl	8002aa4 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 f909 	bl	80004a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fe7c 	bl	8002fa8 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 f8f3 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ba:	2310      	movs	r3, #16
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002c2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f003 f82c 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002d2:	f000 f8e5 	bl	80004a0 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3750      	adds	r7, #80	; 0x50
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <MX_I2C1_Init+0x50>)
 80002e6:	4a13      	ldr	r2, [pc, #76]	; (8000334 <MX_I2C1_Init+0x54>)
 80002e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_I2C1_Init+0x50>)
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_I2C1_Init+0x58>)
 80002ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <MX_I2C1_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_I2C1_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_I2C1_Init+0x50>)
 80002fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <MX_I2C1_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_I2C1_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <MX_I2C1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_I2C1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <MX_I2C1_Init+0x50>)
 800031e:	f000 fd47 	bl	8000db0 <HAL_I2C_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000328:	f000 f8ba 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	200003ec 	.word	0x200003ec
 8000334:	40005400 	.word	0x40005400
 8000338:	000186a0 	.word	0x000186a0

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <MX_USART1_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_USART1_UART_Init+0x4c>)
 8000374:	f003 fad6 	bl	8003924 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f88f 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000440 	.word	0x20000440
 800038c:	40013800 	.word	0x40013800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b1d      	ldr	r3, [pc, #116]	; (800041c <MX_GPIO_Init+0x8c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a1c      	ldr	r2, [pc, #112]	; (800041c <MX_GPIO_Init+0x8c>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_GPIO_Init+0x8c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_GPIO_Init+0x8c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a16      	ldr	r2, [pc, #88]	; (800041c <MX_GPIO_Init+0x8c>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_GPIO_Init+0x8c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_GPIO_Init+0x8c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a10      	ldr	r2, [pc, #64]	; (800041c <MX_GPIO_Init+0x8c>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_GPIO_Init+0x8c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	211c      	movs	r1, #28
 80003f0:	480b      	ldr	r0, [pc, #44]	; (8000420 <MX_GPIO_Init+0x90>)
 80003f2:	f000 fcab 	bl	8000d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80003f6:	231c      	movs	r3, #28
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2302      	movs	r3, #2
 8000404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	4619      	mov	r1, r3
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_GPIO_Init+0x90>)
 800040e:	f000 fb19 	bl	8000a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000412:	bf00      	nop
 8000414:	3720      	adds	r7, #32
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800

08000424 <StartReadMPU6050>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadMPU6050 */
void StartReadMPU6050(void const * argument)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800042c:	f008 fe28 	bl	8009080 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000430:	2104      	movs	r1, #4
 8000432:	4803      	ldr	r0, [pc, #12]	; (8000440 <StartReadMPU6050+0x1c>)
 8000434:	f000 fca2 	bl	8000d7c <HAL_GPIO_TogglePin>
    osDelay(100);
 8000438:	2064      	movs	r0, #100	; 0x64
 800043a:	f007 fc86 	bl	8007d4a <osDelay>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800043e:	e7f7      	b.n	8000430 <StartReadMPU6050+0xc>
 8000440:	40010800 	.word	0x40010800

08000444 <StartCalculatePID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCalculatePID */
void StartCalculatePID(void const * argument)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCalculatePID */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800044c:	2108      	movs	r1, #8
 800044e:	4803      	ldr	r0, [pc, #12]	; (800045c <StartCalculatePID+0x18>)
 8000450:	f000 fc94 	bl	8000d7c <HAL_GPIO_TogglePin>
    osDelay(150);
 8000454:	2096      	movs	r0, #150	; 0x96
 8000456:	f007 fc78 	bl	8007d4a <osDelay>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800045a:	e7f7      	b.n	800044c <StartCalculatePID+0x8>
 800045c:	40010800 	.word	0x40010800

08000460 <StartControllESC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllESC */
void StartControllESC(void const * argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllESC */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000468:	2110      	movs	r1, #16
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <StartControllESC+0x18>)
 800046c:	f000 fc86 	bl	8000d7c <HAL_GPIO_TogglePin>
    osDelay(200);
 8000470:	20c8      	movs	r0, #200	; 0xc8
 8000472:	f007 fc6a 	bl	8007d4a <osDelay>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000476:	e7f7      	b.n	8000468 <StartControllESC+0x8>
 8000478:	40010800 	.word	0x40010800

0800047c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d101      	bne.n	8000492 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800048e:	f000 f9b9 	bl	8000804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40000400 	.word	0x40000400

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a4:	b672      	cpsid	i
}
 80004a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <Error_Handler+0x8>
	...

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <HAL_MspInit+0x68>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a17      	ldr	r2, [pc, #92]	; (8000514 <HAL_MspInit+0x68>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_MspInit+0x68>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <HAL_MspInit+0x68>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_MspInit+0x68>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x68>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	210f      	movs	r1, #15
 80004e6:	f06f 0001 	mvn.w	r0, #1
 80004ea:	f000 fa80 	bl	80009ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_MspInit+0x6c>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_MspInit+0x6c>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <HAL_I2C_MspInit+0x70>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d123      	bne.n	8000584 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <HAL_I2C_MspInit+0x74>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <HAL_I2C_MspInit+0x74>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <HAL_I2C_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000554:	23c0      	movs	r3, #192	; 0xc0
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000558:	2312      	movs	r3, #18
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055c:	2303      	movs	r3, #3
 800055e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <HAL_I2C_MspInit+0x78>)
 8000568:	f000 fa6c 	bl	8000a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <HAL_I2C_MspInit+0x74>)
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_I2C_MspInit+0x74>)
 8000572:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000576:	61d3      	str	r3, [r2, #28]
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <HAL_I2C_MspInit+0x74>)
 800057a:	69db      	ldr	r3, [r3, #28]
 800057c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000584:	bf00      	nop
 8000586:	3720      	adds	r7, #32
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40005400 	.word	0x40005400
 8000590:	40021000 	.word	0x40021000
 8000594:	40010c00 	.word	0x40010c00

08000598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <HAL_UART_MspInit+0x8c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d131      	bne.n	800061c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <HAL_UART_MspInit+0x90>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <HAL_UART_MspInit+0x90>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <HAL_UART_MspInit+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_UART_MspInit+0x90>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_UART_MspInit+0x90>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_UART_MspInit+0x90>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	480b      	ldr	r0, [pc, #44]	; (800062c <HAL_UART_MspInit+0x94>)
 80005fe:	f000 fa21 	bl	8000a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_UART_MspInit+0x94>)
 8000618:	f000 fa14 	bl	8000a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40013800 	.word	0x40013800
 8000628:	40021000 	.word	0x40021000
 800062c:	40010800 	.word	0x40010800

08000630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08e      	sub	sp, #56	; 0x38
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000638:	2300      	movs	r3, #0
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000646:	4b34      	ldr	r3, [pc, #208]	; (8000718 <HAL_InitTick+0xe8>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a33      	ldr	r2, [pc, #204]	; (8000718 <HAL_InitTick+0xe8>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b31      	ldr	r3, [pc, #196]	; (8000718 <HAL_InitTick+0xe8>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800065e:	f107 0210 	add.w	r2, r7, #16
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fe0d 	bl	8003288 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000678:	f002 fdde 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 800067c:	6378      	str	r0, [r7, #52]	; 0x34
 800067e:	e004      	b.n	800068a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000680:	f002 fdda 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8000684:	4603      	mov	r3, r0
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800068a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <HAL_InitTick+0xec>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	0c9b      	lsrs	r3, r3, #18
 8000694:	3b01      	subs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <HAL_InitTick+0xf0>)
 800069a:	4a22      	ldr	r2, [pc, #136]	; (8000724 <HAL_InitTick+0xf4>)
 800069c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <HAL_InitTick+0xf0>)
 80006a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006a4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80006a6:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <HAL_InitTick+0xf0>)
 80006a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006aa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_InitTick+0xf0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_InitTick+0xf0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_InitTick+0xf0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80006be:	4818      	ldr	r0, [pc, #96]	; (8000720 <HAL_InitTick+0xf0>)
 80006c0:	f002 fee6 	bl	8003490 <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d11b      	bne.n	800070a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <HAL_InitTick+0xf0>)
 80006d4:	f002 ff34 	bl	8003540 <HAL_TIM_Base_Start_IT>
 80006d8:	4603      	mov	r3, r0
 80006da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d111      	bne.n	800070a <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80006e6:	201d      	movs	r0, #29
 80006e8:	f000 f99d 	bl	8000a26 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b0f      	cmp	r3, #15
 80006f0:	d808      	bhi.n	8000704 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80006f2:	2200      	movs	r2, #0
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	201d      	movs	r0, #29
 80006f8:	f000 f979 	bl	80009ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_InitTick+0xf8>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	e002      	b.n	800070a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000704:	2301      	movs	r3, #1
 8000706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800070a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800070e:	4618      	mov	r0, r3
 8000710:	3738      	adds	r7, #56	; 0x38
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	431bde83 	.word	0x431bde83
 8000720:	20000494 	.word	0x20000494
 8000724:	40000400 	.word	0x40000400
 8000728:	20000004 	.word	0x20000004

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
	...

08000758 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800075e:	f000 fdb6 	bl	80012ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200017f0 	.word	0x200017f0

0800076c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <TIM3_IRQHandler+0x10>)
 8000772:	f002 ff37 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000494 	.word	0x20000494

08000780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800078c:	f7ff fff8 	bl	8000780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480b      	ldr	r0, [pc, #44]	; (80007c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000792:	490c      	ldr	r1, [pc, #48]	; (80007c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a8:	4c09      	ldr	r4, [pc, #36]	; (80007d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f009 f8b9 	bl	800992c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fce1 	bl	8000180 <main>
  bx lr
 80007be:	4770      	bx	lr
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80007c8:	08009ba0 	.word	0x08009ba0
  ldr r2, =_sbss
 80007cc:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80007d0:	20002040 	.word	0x20002040

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x28>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f8f5 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f7ff ff1e 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fe5a 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000008 	.word	0x20000008
 8000824:	200004dc 	.word	0x200004dc

08000828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	200004dc 	.word	0x200004dc

0800083c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff fff0 	bl	8000828 <HAL_GetTick>
 8000848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d005      	beq.n	8000862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Delay+0x44>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000862:	bf00      	nop
 8000864:	f7ff ffe0 	bl	8000828 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f7      	bhi.n	8000864 <HAL_Delay+0x28>
  {
  }
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db0b      	blt.n	8000912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 021f 	and.w	r2, r3, #31
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <__NVIC_EnableIRQ+0x34>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	2001      	movs	r0, #1
 800090a:	fa00 f202 	lsl.w	r2, r0, r2
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	; (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	; (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	; 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	; 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff4f 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff64 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ffb2 	bl	8000974 <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff81 	bl	8000920 <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff57 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b08b      	sub	sp, #44	; 0x2c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	e169      	b.n	8000d2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f040 8158 	bne.w	8000d26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	4a9a      	ldr	r2, [pc, #616]	; (8000ce4 <HAL_GPIO_Init+0x2a0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d05e      	beq.n	8000b3e <HAL_GPIO_Init+0xfa>
 8000a80:	4a98      	ldr	r2, [pc, #608]	; (8000ce4 <HAL_GPIO_Init+0x2a0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d875      	bhi.n	8000b72 <HAL_GPIO_Init+0x12e>
 8000a86:	4a98      	ldr	r2, [pc, #608]	; (8000ce8 <HAL_GPIO_Init+0x2a4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d058      	beq.n	8000b3e <HAL_GPIO_Init+0xfa>
 8000a8c:	4a96      	ldr	r2, [pc, #600]	; (8000ce8 <HAL_GPIO_Init+0x2a4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d86f      	bhi.n	8000b72 <HAL_GPIO_Init+0x12e>
 8000a92:	4a96      	ldr	r2, [pc, #600]	; (8000cec <HAL_GPIO_Init+0x2a8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d052      	beq.n	8000b3e <HAL_GPIO_Init+0xfa>
 8000a98:	4a94      	ldr	r2, [pc, #592]	; (8000cec <HAL_GPIO_Init+0x2a8>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d869      	bhi.n	8000b72 <HAL_GPIO_Init+0x12e>
 8000a9e:	4a94      	ldr	r2, [pc, #592]	; (8000cf0 <HAL_GPIO_Init+0x2ac>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d04c      	beq.n	8000b3e <HAL_GPIO_Init+0xfa>
 8000aa4:	4a92      	ldr	r2, [pc, #584]	; (8000cf0 <HAL_GPIO_Init+0x2ac>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d863      	bhi.n	8000b72 <HAL_GPIO_Init+0x12e>
 8000aaa:	4a92      	ldr	r2, [pc, #584]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d046      	beq.n	8000b3e <HAL_GPIO_Init+0xfa>
 8000ab0:	4a90      	ldr	r2, [pc, #576]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d85d      	bhi.n	8000b72 <HAL_GPIO_Init+0x12e>
 8000ab6:	2b12      	cmp	r3, #18
 8000ab8:	d82a      	bhi.n	8000b10 <HAL_GPIO_Init+0xcc>
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d859      	bhi.n	8000b72 <HAL_GPIO_Init+0x12e>
 8000abe:	a201      	add	r2, pc, #4	; (adr r2, 8000ac4 <HAL_GPIO_Init+0x80>)
 8000ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac4:	08000b3f 	.word	0x08000b3f
 8000ac8:	08000b19 	.word	0x08000b19
 8000acc:	08000b2b 	.word	0x08000b2b
 8000ad0:	08000b6d 	.word	0x08000b6d
 8000ad4:	08000b73 	.word	0x08000b73
 8000ad8:	08000b73 	.word	0x08000b73
 8000adc:	08000b73 	.word	0x08000b73
 8000ae0:	08000b73 	.word	0x08000b73
 8000ae4:	08000b73 	.word	0x08000b73
 8000ae8:	08000b73 	.word	0x08000b73
 8000aec:	08000b73 	.word	0x08000b73
 8000af0:	08000b73 	.word	0x08000b73
 8000af4:	08000b73 	.word	0x08000b73
 8000af8:	08000b73 	.word	0x08000b73
 8000afc:	08000b73 	.word	0x08000b73
 8000b00:	08000b73 	.word	0x08000b73
 8000b04:	08000b73 	.word	0x08000b73
 8000b08:	08000b21 	.word	0x08000b21
 8000b0c:	08000b35 	.word	0x08000b35
 8000b10:	4a79      	ldr	r2, [pc, #484]	; (8000cf8 <HAL_GPIO_Init+0x2b4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d013      	beq.n	8000b3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b16:	e02c      	b.n	8000b72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	623b      	str	r3, [r7, #32]
          break;
 8000b1e:	e029      	b.n	8000b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	3304      	adds	r3, #4
 8000b26:	623b      	str	r3, [r7, #32]
          break;
 8000b28:	e024      	b.n	8000b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	3308      	adds	r3, #8
 8000b30:	623b      	str	r3, [r7, #32]
          break;
 8000b32:	e01f      	b.n	8000b74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	330c      	adds	r3, #12
 8000b3a:	623b      	str	r3, [r7, #32]
          break;
 8000b3c:	e01a      	b.n	8000b74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b46:	2304      	movs	r3, #4
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e013      	b.n	8000b74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d105      	bne.n	8000b60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b54:	2308      	movs	r3, #8
 8000b56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	611a      	str	r2, [r3, #16]
          break;
 8000b5e:	e009      	b.n	8000b74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b60:	2308      	movs	r3, #8
 8000b62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	615a      	str	r2, [r3, #20]
          break;
 8000b6a:	e003      	b.n	8000b74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	e000      	b.n	8000b74 <HAL_GPIO_Init+0x130>
          break;
 8000b72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2bff      	cmp	r3, #255	; 0xff
 8000b78:	d801      	bhi.n	8000b7e <HAL_GPIO_Init+0x13a>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	e001      	b.n	8000b82 <HAL_GPIO_Init+0x13e>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3304      	adds	r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	2bff      	cmp	r3, #255	; 0xff
 8000b88:	d802      	bhi.n	8000b90 <HAL_GPIO_Init+0x14c>
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	e002      	b.n	8000b96 <HAL_GPIO_Init+0x152>
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	3b08      	subs	r3, #8
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	6a39      	ldr	r1, [r7, #32]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 80b1 	beq.w	8000d26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc4:	4b4d      	ldr	r3, [pc, #308]	; (8000cfc <HAL_GPIO_Init+0x2b8>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a4c      	ldr	r2, [pc, #304]	; (8000cfc <HAL_GPIO_Init+0x2b8>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <HAL_GPIO_Init+0x2b8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bdc:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <HAL_GPIO_Init+0x2bc>)
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	3302      	adds	r3, #2
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a40      	ldr	r2, [pc, #256]	; (8000d04 <HAL_GPIO_Init+0x2c0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d013      	beq.n	8000c30 <HAL_GPIO_Init+0x1ec>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a3f      	ldr	r2, [pc, #252]	; (8000d08 <HAL_GPIO_Init+0x2c4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d00d      	beq.n	8000c2c <HAL_GPIO_Init+0x1e8>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a3e      	ldr	r2, [pc, #248]	; (8000d0c <HAL_GPIO_Init+0x2c8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d007      	beq.n	8000c28 <HAL_GPIO_Init+0x1e4>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <HAL_GPIO_Init+0x2cc>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d101      	bne.n	8000c24 <HAL_GPIO_Init+0x1e0>
 8000c20:	2303      	movs	r3, #3
 8000c22:	e006      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c24:	2304      	movs	r3, #4
 8000c26:	e004      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c28:	2302      	movs	r3, #2
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e000      	b.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c30:	2300      	movs	r3, #0
 8000c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c34:	f002 0203 	and.w	r2, r2, #3
 8000c38:	0092      	lsls	r2, r2, #2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c42:	492f      	ldr	r1, [pc, #188]	; (8000d00 <HAL_GPIO_Init+0x2bc>)
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	3302      	adds	r3, #2
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	492c      	ldr	r1, [pc, #176]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	608b      	str	r3, [r1, #8]
 8000c68:	e006      	b.n	8000c78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	4928      	ldr	r1, [pc, #160]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d006      	beq.n	8000c92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	4922      	ldr	r1, [pc, #136]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	60cb      	str	r3, [r1, #12]
 8000c90:	e006      	b.n	8000ca0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	491e      	ldr	r1, [pc, #120]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d006      	beq.n	8000cba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4918      	ldr	r1, [pc, #96]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
 8000cb8:	e006      	b.n	8000cc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	4914      	ldr	r1, [pc, #80]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d021      	beq.n	8000d18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	490e      	ldr	r1, [pc, #56]	; (8000d14 <HAL_GPIO_Init+0x2d0>)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	600b      	str	r3, [r1, #0]
 8000ce0:	e021      	b.n	8000d26 <HAL_GPIO_Init+0x2e2>
 8000ce2:	bf00      	nop
 8000ce4:	10320000 	.word	0x10320000
 8000ce8:	10310000 	.word	0x10310000
 8000cec:	10220000 	.word	0x10220000
 8000cf0:	10210000 	.word	0x10210000
 8000cf4:	10120000 	.word	0x10120000
 8000cf8:	10110000 	.word	0x10110000
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000
 8000d04:	40010800 	.word	0x40010800
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40011400 	.word	0x40011400
 8000d14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_GPIO_Init+0x304>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	4909      	ldr	r1, [pc, #36]	; (8000d48 <HAL_GPIO_Init+0x304>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	3301      	adds	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	fa22 f303 	lsr.w	r3, r2, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f47f ae8e 	bne.w	8000a58 <HAL_GPIO_Init+0x14>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	372c      	adds	r7, #44	; 0x2c
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40010400 	.word	0x40010400

08000d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	807b      	strh	r3, [r7, #2]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d5c:	787b      	ldrb	r3, [r7, #1]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d62:	887a      	ldrh	r2, [r7, #2]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d68:	e003      	b.n	8000d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	611a      	str	r2, [r3, #16]
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d8e:	887a      	ldrh	r2, [r7, #2]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4013      	ands	r3, r2
 8000d94:	041a      	lsls	r2, r3, #16
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	43d9      	mvns	r1, r3
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	431a      	orrs	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	611a      	str	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e12b      	b.n	800101a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fba0 	bl	800051c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2224      	movs	r2, #36	; 0x24
 8000de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e14:	f002 fa10 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8000e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a81      	ldr	r2, [pc, #516]	; (8001024 <HAL_I2C_Init+0x274>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d807      	bhi.n	8000e34 <HAL_I2C_Init+0x84>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4a80      	ldr	r2, [pc, #512]	; (8001028 <HAL_I2C_Init+0x278>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	bf94      	ite	ls
 8000e2c:	2301      	movls	r3, #1
 8000e2e:	2300      	movhi	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	e006      	b.n	8000e42 <HAL_I2C_Init+0x92>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4a7d      	ldr	r2, [pc, #500]	; (800102c <HAL_I2C_Init+0x27c>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	bf94      	ite	ls
 8000e3c:	2301      	movls	r3, #1
 8000e3e:	2300      	movhi	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e0e7      	b.n	800101a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4a78      	ldr	r2, [pc, #480]	; (8001030 <HAL_I2C_Init+0x280>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <HAL_I2C_Init+0x274>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d802      	bhi.n	8000e84 <HAL_I2C_Init+0xd4>
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	3301      	adds	r3, #1
 8000e82:	e009      	b.n	8000e98 <HAL_I2C_Init+0xe8>
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e8a:	fb02 f303 	mul.w	r3, r2, r3
 8000e8e:	4a69      	ldr	r2, [pc, #420]	; (8001034 <HAL_I2C_Init+0x284>)
 8000e90:	fba2 2303 	umull	r2, r3, r2, r3
 8000e94:	099b      	lsrs	r3, r3, #6
 8000e96:	3301      	adds	r3, #1
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000eaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	495c      	ldr	r1, [pc, #368]	; (8001024 <HAL_I2C_Init+0x274>)
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d819      	bhi.n	8000eec <HAL_I2C_Init+0x13c>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	1e59      	subs	r1, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ecc:	400b      	ands	r3, r1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00a      	beq.n	8000ee8 <HAL_I2C_Init+0x138>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	1e59      	subs	r1, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ee6:	e051      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	e04f      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d111      	bne.n	8000f18 <HAL_I2C_Init+0x168>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	1e58      	subs	r0, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6859      	ldr	r1, [r3, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	440b      	add	r3, r1
 8000f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf0c      	ite	eq
 8000f10:	2301      	moveq	r3, #1
 8000f12:	2300      	movne	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	e012      	b.n	8000f3e <HAL_I2C_Init+0x18e>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1e58      	subs	r0, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6859      	ldr	r1, [r3, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	0099      	lsls	r1, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf0c      	ite	eq
 8000f38:	2301      	moveq	r3, #1
 8000f3a:	2300      	movne	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2C_Init+0x196>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e022      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10e      	bne.n	8000f6c <HAL_I2C_Init+0x1bc>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	1e58      	subs	r0, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6859      	ldr	r1, [r3, #4]
 8000f56:	460b      	mov	r3, r1
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	440b      	add	r3, r1
 8000f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f60:	3301      	adds	r3, #1
 8000f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f6a:	e00f      	b.n	8000f8c <HAL_I2C_Init+0x1dc>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	1e58      	subs	r0, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6859      	ldr	r1, [r3, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	440b      	add	r3, r1
 8000f7a:	0099      	lsls	r1, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	6809      	ldr	r1, [r1, #0]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	6911      	ldr	r1, [r2, #16]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68d2      	ldr	r2, [r2, #12]
 8000fc6:	4311      	orrs	r1, r2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2220      	movs	r2, #32
 8001006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	000186a0 	.word	0x000186a0
 8001028:	001e847f 	.word	0x001e847f
 800102c:	003d08ff 	.word	0x003d08ff
 8001030:	431bde83 	.word	0x431bde83
 8001034:	10624dd3 	.word	0x10624dd3

08001038 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b08b      	sub	sp, #44	; 0x2c
 800103c:	af06      	add	r7, sp, #24
 800103e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0f1      	b.n	800122e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d106      	bne.n	8001064 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f008 f98c 	bl	800937c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fd5b 	bl	8003b2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	687e      	ldr	r6, [r7, #4]
 800107e:	466d      	mov	r5, sp
 8001080:	f106 0410 	add.w	r4, r6, #16
 8001084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	602b      	str	r3, [r5, #0]
 800108c:	1d33      	adds	r3, r6, #4
 800108e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f002 fd25 	bl	8003ae0 <USB_CoreInit>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2202      	movs	r2, #2
 80010a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0c2      	b.n	800122e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fd56 	bl	8003b60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e040      	b.n	800113c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	440b      	add	r3, r1
 80010ca:	3301      	adds	r3, #1
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	3303      	adds	r3, #3
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	3338      	adds	r3, #56	; 0x38
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	4613      	mov	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	440b      	add	r3, r1
 800111c:	333c      	adds	r3, #60	; 0x3c
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	440b      	add	r3, r1
 8001130:	3340      	adds	r3, #64	; 0x40
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	429a      	cmp	r2, r3
 8001144:	d3b9      	bcc.n	80010ba <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e044      	b.n	80011d6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d3b5      	bcc.n	800114c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	687e      	ldr	r6, [r7, #4]
 80011e8:	466d      	mov	r5, sp
 80011ea:	f106 0410 	add.w	r4, r6, #16
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	602b      	str	r3, [r5, #0]
 80011f6:	1d33      	adds	r3, r6, #4
 80011f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f002 fcbc 	bl	8003b78 <USB_DevInit>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2202      	movs	r2, #2
 800120a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00d      	b.n	800122e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fd51 	bl	8005cce <USB_DevDisconnect>

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001236 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_PCD_Start+0x16>
 8001248:	2302      	movs	r3, #2
 800124a:	e016      	b.n	800127a <HAL_PCD_Start+0x44>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fc51 	bl	8003b00 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800125e:	2101      	movs	r1, #1
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f008 face 	bl	8009802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fd25 	bl	8005cba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_PCD_Stop+0x16>
 8001294:	2302      	movs	r3, #2
 8001296:	e016      	b.n	80012c6 <HAL_PCD_Stop+0x44>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fc41 	bl	8003b2c <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 80012aa:	2100      	movs	r1, #0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f008 faa8 	bl	8009802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f004 fd09 	bl	8005cce <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b088      	sub	sp, #32
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 fd01 	bl	8005ce2 <USB_ReadInterrupts>
 80012e0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fabc 	bl	800186a <PCD_EP_ISR_Handler>

    return;
 80012f2:	e119      	b.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d013      	beq.n	8001326 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001310:	b292      	uxth	r2, r2
 8001312:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f008 f8ab 	bl	8009472 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800131c:	2100      	movs	r1, #0
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f905 	bl	800152e <HAL_PCD_SetAddress>

    return;
 8001324:	e100      	b.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00c      	beq.n	800134a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001342:	b292      	uxth	r2, r2
 8001344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001348:	e0ee      	b.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00c      	beq.n	800136e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001366:	b292      	uxth	r2, r2
 8001368:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800136c:	e0dc      	b.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d027      	beq.n	80013c8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001380:	b29a      	uxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0204 	bic.w	r2, r2, #4
 800138a:	b292      	uxth	r2, r2
 800138c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0208 	bic.w	r2, r2, #8
 80013a2:	b292      	uxth	r2, r2
 80013a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f008 f89b 	bl	80094e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013c0:	b292      	uxth	r2, r2
 80013c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013c6:	e0af      	b.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8083 	beq.w	80014da <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	77fb      	strb	r3, [r7, #31]
 80013d8:	e010      	b.n	80013fc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	7ffb      	ldrb	r3, [r7, #31]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	441a      	add	r2, r3
 80013e6:	7ffb      	ldrb	r3, [r7, #31]
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	b292      	uxth	r2, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	3320      	adds	r3, #32
 80013f0:	443b      	add	r3, r7
 80013f2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	3301      	adds	r3, #1
 80013fa:	77fb      	strb	r3, [r7, #31]
 80013fc:	7ffb      	ldrb	r3, [r7, #31]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	d9eb      	bls.n	80013da <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800140a:	b29a      	uxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0201 	orr.w	r2, r2, #1
 8001414:	b292      	uxth	r2, r2
 8001416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	b292      	uxth	r2, r2
 800142e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001432:	bf00      	nop
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800143c:	b29b      	uxth	r3, r3
 800143e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f6      	beq.n	8001434 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800144e:	b29a      	uxth	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001458:	b292      	uxth	r2, r2
 800145a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	77fb      	strb	r3, [r7, #31]
 8001462:	e00f      	b.n	8001484 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4611      	mov	r1, r2
 800146c:	7ffa      	ldrb	r2, [r7, #31]
 800146e:	0092      	lsls	r2, r2, #2
 8001470:	440a      	add	r2, r1
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	3320      	adds	r3, #32
 8001476:	443b      	add	r3, r7
 8001478:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800147c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800147e:	7ffb      	ldrb	r3, [r7, #31]
 8001480:	3301      	adds	r3, #1
 8001482:	77fb      	strb	r3, [r7, #31]
 8001484:	7ffb      	ldrb	r3, [r7, #31]
 8001486:	2b07      	cmp	r3, #7
 8001488:	d9ec      	bls.n	8001464 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001492:	b29a      	uxth	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0208 	orr.w	r2, r2, #8
 800149c:	b292      	uxth	r2, r2
 800149e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b4:	b292      	uxth	r2, r2
 80014b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0204 	orr.w	r2, r2, #4
 80014cc:	b292      	uxth	r2, r2
 80014ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f007 ffec 	bl	80094b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014d8:	e026      	b.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00f      	beq.n	8001504 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014f6:	b292      	uxth	r2, r2
 80014f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f007 ffaa 	bl	8009456 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001502:	e011      	b.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00c      	beq.n	8001528 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001520:	b292      	uxth	r2, r2
 8001522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001526:	bf00      	nop
  }
}
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_PCD_SetAddress+0x1a>
 8001544:	2302      	movs	r3, #2
 8001546:	e013      	b.n	8001570 <HAL_PCD_SetAddress+0x42>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f004 fb97 	bl	8005c94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	70fb      	strb	r3, [r7, #3]
 800158a:	460b      	mov	r3, r1
 800158c:	803b      	strh	r3, [r7, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da0e      	bge.n	80015bc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2201      	movs	r2, #1
 80015b8:	705a      	strb	r2, [r3, #1]
 80015ba:	e00e      	b.n	80015da <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	f003 0207 	and.w	r2, r3, #7
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015e6:	883a      	ldrh	r2, [r7, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	78ba      	ldrb	r2, [r7, #2]
 80015f0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015f2:	78bb      	ldrb	r3, [r7, #2]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d102      	bne.n	80015fe <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_PCD_EP_Open+0x94>
 8001608:	2302      	movs	r3, #2
 800160a:	e00e      	b.n	800162a <HAL_PCD_EP_Open+0xb2>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68f9      	ldr	r1, [r7, #12]
 800161a:	4618      	mov	r0, r3
 800161c:	f002 facc 	bl	8003bb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001628:	7afb      	ldrb	r3, [r7, #11]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	460b      	mov	r3, r1
 8001640:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	f003 0207 	and.w	r2, r3, #7
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2200      	movs	r2, #0
 8001670:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	b2da      	uxtb	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6979      	ldr	r1, [r7, #20]
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fe57 	bl	8004338 <USB_EPStartXfer>

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	460b      	mov	r3, r1
 80016a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a4:	7afb      	ldrb	r3, [r7, #11]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2201      	movs	r2, #1
 80016de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6979      	ldr	r1, [r7, #20]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fe20 	bl	8004338 <USB_EPStartXfer>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	f003 0207 	and.w	r2, r3, #7
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	d901      	bls.n	8001720 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e04c      	b.n	80017ba <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da0e      	bge.n	8001746 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	705a      	strb	r2, [r3, #1]
 8001744:	e00c      	b.n	8001760 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	b2da      	uxtb	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_PCD_EP_SetStall+0x7e>
 800177c:	2302      	movs	r3, #2
 800177e:	e01c      	b.n	80017ba <HAL_PCD_EP_SetStall+0xb8>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	4618      	mov	r0, r3
 8001790:	f004 f983 	bl	8005a9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f004 faa8 	bl	8005d00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	f003 020f 	and.w	r2, r3, #15
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d901      	bls.n	80017e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e040      	b.n	8001862 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da0e      	bge.n	8001806 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2201      	movs	r2, #1
 8001802:	705a      	strb	r2, [r3, #1]
 8001804:	e00e      	b.n	8001824 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	f003 0207 	and.w	r2, r3, #7
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	b2da      	uxtb	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_PCD_EP_ClrStall+0x82>
 8001840:	2302      	movs	r3, #2
 8001842:	e00e      	b.n	8001862 <HAL_PCD_EP_ClrStall+0xa0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f004 f971 	bl	8005b3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b096      	sub	sp, #88	; 0x58
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001872:	e3bf      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800187c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001880:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800188e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 8179 	bne.w	8001b8a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d152      	bne.n	800194a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018b4:	81fb      	strh	r3, [r7, #14]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	89fb      	ldrh	r3, [r7, #14]
 80018bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3328      	adds	r3, #40	; 0x28
 80018cc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	3302      	adds	r3, #2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	441a      	add	r2, r3
 8001904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001906:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001908:	2100      	movs	r1, #0
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f007 fd89 	bl	8009422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 836b 	beq.w	8001ff4 <PCD_EP_ISR_Handler+0x78a>
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 8366 	bne.w	8001ff4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b292      	uxth	r2, r2
 800193c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001948:	e354      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001950:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800195c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001964:	2b00      	cmp	r3, #0
 8001966:	d034      	beq.n	80019d2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001970:	b29b      	uxth	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	3306      	adds	r3, #6
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	4413      	add	r3, r2
 8001986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800199e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80019a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	f004 f9fa 	bl	8005da0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019b8:	4013      	ands	r3, r2
 80019ba:	823b      	strh	r3, [r7, #16]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	8a3a      	ldrh	r2, [r7, #16]
 80019c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019c6:	b292      	uxth	r2, r2
 80019c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f007 fcfc 	bl	80093c8 <HAL_PCD_SetupStageCallback>
 80019d0:	e310      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f280 830c 	bge.w	8001ff4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019e8:	4013      	ands	r3, r2
 80019ea:	83fb      	strh	r3, [r7, #30]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	8bfa      	ldrh	r2, [r7, #30]
 80019f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019f6:	b292      	uxth	r2, r2
 80019f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3306      	adds	r3, #6
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d019      	beq.n	8001a62 <PCD_EP_ISR_Handler+0x1f8>
 8001a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3c:	6959      	ldr	r1, [r3, #20]
 8001a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a40:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a44:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f004 f9aa 	bl	8005da0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	441a      	add	r2, r3
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f007 fcc5 	bl	80093ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f040 82bd 	bne.w	8001ff4 <PCD_EP_ISR_Handler+0x78a>
 8001a7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a86:	f000 82b5 	beq.w	8001ff4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	801a      	strh	r2, [r3, #0]
 8001aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b3e      	cmp	r3, #62	; 0x3e
 8001ac0:	d91d      	bls.n	8001afe <PCD_EP_ISR_Handler+0x294>
 8001ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <PCD_EP_ISR_Handler+0x272>
 8001ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	647b      	str	r3, [r7, #68]	; 0x44
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	029b      	lsls	r3, r3, #10
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	801a      	strh	r2, [r3, #0]
 8001afc:	e026      	b.n	8001b4c <PCD_EP_ISR_Handler+0x2e2>
 8001afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10a      	bne.n	8001b1c <PCD_EP_ISR_Handler+0x2b2>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	801a      	strh	r2, [r3, #0]
 8001b1a:	e017      	b.n	8001b4c <PCD_EP_ISR_Handler+0x2e2>
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	647b      	str	r3, [r7, #68]	; 0x44
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <PCD_EP_ISR_Handler+0x2cc>
 8001b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b32:	3301      	adds	r3, #1
 8001b34:	647b      	str	r3, [r7, #68]	; 0x44
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	029b      	lsls	r3, r3, #10
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b5c:	827b      	strh	r3, [r7, #18]
 8001b5e:	8a7b      	ldrh	r3, [r7, #18]
 8001b60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b64:	827b      	strh	r3, [r7, #18]
 8001b66:	8a7b      	ldrh	r3, [r7, #18]
 8001b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b6c:	827b      	strh	r3, [r7, #18]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	8a7b      	ldrh	r3, [r7, #18]
 8001b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	8013      	strh	r3, [r2, #0]
 8001b88:	e234      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b9e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f280 80fc 	bge.w	8001da0 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001bd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001bde:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf6:	7b1b      	ldrb	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d125      	bne.n	8001c48 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3306      	adds	r3, #6
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001c28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8092 	beq.w	8001d56 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c38:	6959      	ldr	r1, [r3, #20]
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	88da      	ldrh	r2, [r3, #6]
 8001c3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c42:	f004 f8ad 	bl	8005da0 <USB_ReadPMA>
 8001c46:	e086      	b.n	8001d56 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	78db      	ldrb	r3, [r3, #3]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d10a      	bne.n	8001c66 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c54:	461a      	mov	r2, r3
 8001c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f9d9 	bl	8002010 <HAL_PCD_EP_DB_Receive>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001c64:	e077      	b.n	8001d56 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c80:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	441a      	add	r2, r3
 8001c92:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d024      	beq.n	8001d0e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cf0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02e      	beq.n	8001d56 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfe:	6959      	ldr	r1, [r3, #20]
 8001d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d02:	891a      	ldrh	r2, [r3, #8]
 8001d04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d08:	f004 f84a 	bl	8005da0 <USB_ReadPMA>
 8001d0c:	e023      	b.n	8001d56 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	3306      	adds	r3, #6
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d36:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d48:	6959      	ldr	r1, [r3, #20]
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	895a      	ldrh	r2, [r3, #10]
 8001d4e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d52:	f004 f825 	bl	8005da0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d58:	69da      	ldr	r2, [r3, #28]
 8001d5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d5e:	441a      	add	r2, r3
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d6c:	441a      	add	r2, r3
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <PCD_EP_ISR_Handler+0x51c>
 8001d7a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d206      	bcs.n	8001d94 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f007 fb2d 	bl	80093ec <HAL_PCD_DataOutStageCallback>
 8001d92:	e005      	b.n	8001da0 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 facc 	bl	8004338 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001da0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8123 	beq.w	8001ff4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ddc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	441a      	add	r2, r3
 8001dee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e00:	78db      	ldrb	r3, [r3, #3]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 80a2 	bne.w	8001f4c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e10:	7b1b      	ldrb	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8093 	beq.w	8001f3e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d046      	beq.n	8001eb2 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	785b      	ldrb	r3, [r3, #1]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d126      	bne.n	8001e7a <PCD_EP_ISR_Handler+0x610>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	4413      	add	r3, r2
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	011a      	lsls	r2, r3, #4
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	801a      	strh	r2, [r3, #0]
 8001e78:	e061      	b.n	8001f3e <PCD_EP_ISR_Handler+0x6d4>
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d15d      	bne.n	8001f3e <PCD_EP_ISR_Handler+0x6d4>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e96:	4413      	add	r3, r2
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	011a      	lsls	r2, r3, #4
 8001ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	2200      	movs	r2, #0
 8001eae:	801a      	strh	r2, [r3, #0]
 8001eb0:	e045      	b.n	8001f3e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eba:	785b      	ldrb	r3, [r3, #1]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d126      	bne.n	8001f0e <PCD_EP_ISR_Handler+0x6a4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed4:	4413      	add	r3, r2
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	011a      	lsls	r2, r3, #4
 8001ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	801a      	strh	r2, [r3, #0]
 8001f0c:	e017      	b.n	8001f3e <PCD_EP_ISR_Handler+0x6d4>
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f10:	785b      	ldrb	r3, [r3, #1]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d113      	bne.n	8001f3e <PCD_EP_ISR_Handler+0x6d4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f24:	4413      	add	r3, r2
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	011a      	lsls	r2, r3, #4
 8001f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f30:	4413      	add	r3, r2
 8001f32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f007 fa6c 	bl	8009422 <HAL_PCD_DataInStageCallback>
 8001f4a:	e053      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d146      	bne.n	8001fe6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d907      	bls.n	8001fa0 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f98:	1ad2      	subs	r2, r2, r3
 8001f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	e002      	b.n	8001fa6 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f007 fa34 	bl	8009422 <HAL_PCD_DataInStageCallback>
 8001fba:	e01b      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fc4:	441a      	add	r2, r3
 8001fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fc8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001fd2:	441a      	add	r2, r3
 8001fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 f9aa 	bl	8004338 <USB_EPStartXfer>
 8001fe4:	e006      	b.n	8001ff4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fe6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fea:	461a      	mov	r2, r3
 8001fec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f91b 	bl	800222a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	f6ff ac37 	blt.w	8001874 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3758      	adds	r7, #88	; 0x58
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d07e      	beq.n	8002126 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	3302      	adds	r3, #2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	4413      	add	r3, r2
 8002046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002050:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	8b7b      	ldrh	r3, [r7, #26]
 8002058:	429a      	cmp	r2, r3
 800205a:	d306      	bcc.n	800206a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	8b7b      	ldrh	r3, [r7, #26]
 8002062:	1ad2      	subs	r2, r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	619a      	str	r2, [r3, #24]
 8002068:	e002      	b.n	8002070 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d123      	bne.n	80020c0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	833b      	strh	r3, [r7, #24]
 8002094:	8b3b      	ldrh	r3, [r7, #24]
 8002096:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800209a:	833b      	strh	r3, [r7, #24]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	8b3b      	ldrh	r3, [r7, #24]
 80020ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	b29b      	uxth	r3, r3
 80020be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01f      	beq.n	800210a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e4:	82fb      	strh	r3, [r7, #22]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	441a      	add	r2, r3
 80020f4:	8afb      	ldrh	r3, [r7, #22]
 80020f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002106:	b29b      	uxth	r3, r3
 8002108:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800210a:	8b7b      	ldrh	r3, [r7, #26]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8087 	beq.w	8002220 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6959      	ldr	r1, [r3, #20]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	891a      	ldrh	r2, [r3, #8]
 800211e:	8b7b      	ldrh	r3, [r7, #26]
 8002120:	f003 fe3e 	bl	8005da0 <USB_ReadPMA>
 8002124:	e07c      	b.n	8002220 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	3306      	adds	r3, #6
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	4413      	add	r3, r2
 8002144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800214e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	8b7b      	ldrh	r3, [r7, #26]
 8002156:	429a      	cmp	r2, r3
 8002158:	d306      	bcc.n	8002168 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	8b7b      	ldrh	r3, [r7, #26]
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	619a      	str	r2, [r3, #24]
 8002166:	e002      	b.n	800216e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d123      	bne.n	80021be <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800218c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002190:	83fb      	strh	r3, [r7, #30]
 8002192:	8bfb      	ldrh	r3, [r7, #30]
 8002194:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002198:	83fb      	strh	r3, [r7, #30]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	441a      	add	r2, r3
 80021a8:	8bfb      	ldrh	r3, [r7, #30]
 80021aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d11f      	bne.n	8002208 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	83bb      	strh	r3, [r7, #28]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	441a      	add	r2, r3
 80021f2:	8bbb      	ldrh	r3, [r7, #28]
 80021f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002204:	b29b      	uxth	r3, r3
 8002206:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002208:	8b7b      	ldrh	r3, [r7, #26]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6959      	ldr	r1, [r3, #20]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	895a      	ldrh	r2, [r3, #10]
 800221a:	8b7b      	ldrh	r3, [r7, #26]
 800221c:	f003 fdc0 	bl	8005da0 <USB_ReadPMA>
    }
  }

  return count;
 8002220:	8b7b      	ldrh	r3, [r7, #26]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b0a4      	sub	sp, #144	; 0x90
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	4613      	mov	r3, r2
 8002236:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 81dd 	beq.w	80025fe <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	3302      	adds	r3, #2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	699a      	ldr	r2, [r3, #24]
 8002274:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002278:	429a      	cmp	r2, r3
 800227a:	d907      	bls.n	800228c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002284:	1ad2      	subs	r2, r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	619a      	str	r2, [r3, #24]
 800228a:	e002      	b.n	8002292 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 80b9 	bne.w	800240e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d126      	bne.n	80022f2 <HAL_PCD_EP_DB_Transmit+0xc8>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	4413      	add	r3, r2
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	011a      	lsls	r2, r3, #4
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	4413      	add	r3, r2
 80022c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	801a      	strh	r2, [r3, #0]
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	801a      	strh	r2, [r3, #0]
 80022f0:	e01a      	b.n	8002328 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	785b      	ldrb	r3, [r3, #1]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d116      	bne.n	8002328 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	4413      	add	r3, r2
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	011a      	lsls	r2, r3, #4
 8002318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231a:	4413      	add	r3, r2
 800231c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	2200      	movs	r2, #0
 8002326:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d126      	bne.n	8002384 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002344:	b29b      	uxth	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	4413      	add	r3, r2
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	011a      	lsls	r2, r3, #4
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002368:	b29a      	uxth	r2, r3
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800237c:	b29a      	uxth	r2, r3
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	e017      	b.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d113      	bne.n	80023b4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002394:	b29b      	uxth	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	4413      	add	r3, r2
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	011a      	lsls	r2, r3, #4
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	4413      	add	r3, r2
 80023a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	2200      	movs	r2, #0
 80023b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f007 f831 	bl	8009422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 82fc 	beq.w	80029c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e6:	82fb      	strh	r3, [r7, #22]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	8afb      	ldrh	r3, [r7, #22]
 80023f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002400:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	b29b      	uxth	r3, r3
 800240a:	8013      	strh	r3, [r2, #0]
 800240c:	e2da      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d021      	beq.n	800245c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800242e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002432:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	441a      	add	r2, r3
 8002444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800244c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002450:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002458:	b29b      	uxth	r3, r3
 800245a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002462:	2b01      	cmp	r3, #1
 8002464:	f040 82ae 	bne.w	80029c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002470:	441a      	add	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800247e:	441a      	add	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d30b      	bcc.n	80024a8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a0:	1ad2      	subs	r2, r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	621a      	str	r2, [r3, #32]
 80024a6:	e017      	b.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80024b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024c0:	e00a      	b.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d165      	bne.n	80025ac <HAL_PCD_EP_DB_Transmit+0x382>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f4:	4413      	add	r3, r2
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	011a      	lsls	r2, r3, #4
 80024fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002500:	4413      	add	r3, r2
 8002502:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002512:	b29a      	uxth	r2, r3
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251c:	2b3e      	cmp	r3, #62	; 0x3e
 800251e:	d91d      	bls.n	800255c <HAL_PCD_EP_DB_Transmit+0x332>
 8002520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	64bb      	str	r3, [r7, #72]	; 0x48
 8002528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <HAL_PCD_EP_DB_Transmit+0x310>
 8002534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002536:	3b01      	subs	r3, #1
 8002538:	64bb      	str	r3, [r7, #72]	; 0x48
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29a      	uxth	r2, r3
 8002540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002542:	b29b      	uxth	r3, r3
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	b29b      	uxth	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002554:	b29a      	uxth	r2, r3
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	e044      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800255c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <HAL_PCD_EP_DB_Transmit+0x350>
 8002564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800256e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002572:	b29a      	uxth	r2, r3
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	801a      	strh	r2, [r3, #0]
 8002578:	e035      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800257a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
 8002582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_PCD_EP_DB_Transmit+0x36a>
 800258e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002590:	3301      	adds	r3, #1
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29a      	uxth	r2, r3
 800259a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800259c:	b29b      	uxth	r3, r3
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a8:	801a      	strh	r2, [r3, #0]
 80025aa:	e01c      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d118      	bne.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c8:	4413      	add	r3, r2
 80025ca:	647b      	str	r3, [r7, #68]	; 0x44
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	011a      	lsls	r2, r3, #4
 80025d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d4:	4413      	add	r3, r2
 80025d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
 80025dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6959      	ldr	r1, [r3, #20]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	891a      	ldrh	r2, [r3, #8]
 80025f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f003 fb8d 	bl	8005d16 <USB_WritePMA>
 80025fc:	e1e2      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002606:	b29b      	uxth	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	3306      	adds	r3, #6
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002626:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002632:	429a      	cmp	r2, r3
 8002634:	d307      	bcc.n	8002646 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	619a      	str	r2, [r3, #24]
 8002644:	e002      	b.n	800264c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f040 80c0 	bne.w	80027d6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	785b      	ldrb	r3, [r3, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d126      	bne.n	80026ac <HAL_PCD_EP_DB_Transmit+0x482>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002672:	4413      	add	r3, r2
 8002674:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	011a      	lsls	r2, r3, #4
 800267c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800267e:	4413      	add	r3, r2
 8002680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002684:	67bb      	str	r3, [r7, #120]	; 0x78
 8002686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002690:	b29a      	uxth	r2, r3
 8002692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	e01a      	b.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d116      	bne.n	80026e2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	667b      	str	r3, [r7, #100]	; 0x64
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026c8:	4413      	add	r3, r2
 80026ca:	667b      	str	r3, [r7, #100]	; 0x64
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	011a      	lsls	r2, r3, #4
 80026d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d4:	4413      	add	r3, r2
 80026d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026da:	663b      	str	r3, [r7, #96]	; 0x60
 80026dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026de:	2200      	movs	r2, #0
 80026e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	677b      	str	r3, [r7, #116]	; 0x74
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	785b      	ldrb	r3, [r3, #1]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d12b      	bne.n	8002748 <HAL_PCD_EP_DB_Transmit+0x51e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	4413      	add	r3, r2
 8002706:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	011a      	lsls	r2, r3, #4
 800270e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002710:	4413      	add	r3, r2
 8002712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800271a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002726:	b29a      	uxth	r2, r3
 8002728:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b29b      	uxth	r3, r3
 8002736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800273a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800273e:	b29a      	uxth	r2, r3
 8002740:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	e017      	b.n	8002778 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d113      	bne.n	8002778 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002758:	b29b      	uxth	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275e:	4413      	add	r3, r2
 8002760:	677b      	str	r3, [r7, #116]	; 0x74
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	011a      	lsls	r2, r3, #4
 8002768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800276a:	4413      	add	r3, r2
 800276c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002770:	673b      	str	r3, [r7, #112]	; 0x70
 8002772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002774:	2200      	movs	r2, #0
 8002776:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f006 fe4f 	bl	8009422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 811a 	bne.w	80029c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80027c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8013      	strh	r3, [r2, #0]
 80027d4:	e0f6      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d121      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	441a      	add	r2, r3
 800280c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	b29b      	uxth	r3, r3
 8002822:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 80ca 	bne.w	80029c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002838:	441a      	add	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002846:	441a      	add	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	6a1a      	ldr	r2, [r3, #32]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	429a      	cmp	r2, r3
 8002856:	d30b      	bcc.n	8002870 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6a1a      	ldr	r2, [r3, #32]
 8002864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002868:	1ad2      	subs	r2, r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	621a      	str	r2, [r3, #32]
 800286e:	e017      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d108      	bne.n	800288a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002878:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800287c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002888:	e00a      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	657b      	str	r3, [r7, #84]	; 0x54
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d165      	bne.n	800297a <HAL_PCD_EP_DB_Transmit+0x750>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c2:	4413      	add	r3, r2
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	011a      	lsls	r2, r3, #4
 80028cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ce:	4413      	add	r3, r2
 80028d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80028d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ea:	2b3e      	cmp	r3, #62	; 0x3e
 80028ec:	d91d      	bls.n	800292a <HAL_PCD_EP_DB_Transmit+0x700>
 80028ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002904:	3b01      	subs	r3, #1
 8002906:	66bb      	str	r3, [r7, #104]	; 0x68
 8002908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29a      	uxth	r2, r3
 800290e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002910:	b29b      	uxth	r3, r3
 8002912:	029b      	lsls	r3, r3, #10
 8002914:	b29b      	uxth	r3, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29a      	uxth	r2, r3
 8002924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	e041      	b.n	80029ae <HAL_PCD_EP_DB_Transmit+0x784>
 800292a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002940:	b29a      	uxth	r2, r3
 8002942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	e032      	b.n	80029ae <HAL_PCD_EP_DB_Transmit+0x784>
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_PCD_EP_DB_Transmit+0x738>
 800295c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800295e:	3301      	adds	r3, #1
 8002960:	66bb      	str	r3, [r7, #104]	; 0x68
 8002962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29a      	uxth	r2, r3
 8002968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800296a:	b29b      	uxth	r3, r3
 800296c:	029b      	lsls	r3, r3, #10
 800296e:	b29b      	uxth	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	b29a      	uxth	r2, r3
 8002974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	e019      	b.n	80029ae <HAL_PCD_EP_DB_Transmit+0x784>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d115      	bne.n	80029ae <HAL_PCD_EP_DB_Transmit+0x784>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298a:	b29b      	uxth	r3, r3
 800298c:	461a      	mov	r2, r3
 800298e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002990:	4413      	add	r3, r2
 8002992:	657b      	str	r3, [r7, #84]	; 0x54
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	011a      	lsls	r2, r3, #4
 800299a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299c:	4413      	add	r3, r2
 800299e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029a2:	653b      	str	r3, [r7, #80]	; 0x50
 80029a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6959      	ldr	r1, [r3, #20]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	895a      	ldrh	r2, [r3, #10]
 80029ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f003 f9a9 	bl	8005d16 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029de:	82bb      	strh	r3, [r7, #20]
 80029e0:	8abb      	ldrh	r3, [r7, #20]
 80029e2:	f083 0310 	eor.w	r3, r3, #16
 80029e6:	82bb      	strh	r3, [r7, #20]
 80029e8:	8abb      	ldrh	r3, [r7, #20]
 80029ea:	f083 0320 	eor.w	r3, r3, #32
 80029ee:	82bb      	strh	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	8abb      	ldrh	r3, [r7, #20]
 8002a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3790      	adds	r7, #144	; 0x90
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b087      	sub	sp, #28
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	817b      	strh	r3, [r7, #10]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00b      	beq.n	8002a54 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a3c:	897b      	ldrh	r3, [r7, #10]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e009      	b.n	8002a68 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a54:	897a      	ldrh	r2, [r7, #10]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a68:	893b      	ldrh	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d107      	bne.n	8002a7e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	80da      	strh	r2, [r3, #6]
 8002a7c:	e00b      	b.n	8002a96 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2201      	movs	r2, #1
 8002a82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e272      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8087 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac4:	4b92      	ldr	r3, [pc, #584]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d00c      	beq.n	8002aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ad0:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d112      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5e>
 8002adc:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae8:	d10b      	bne.n	8002b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	4b89      	ldr	r3, [pc, #548]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d06c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x12c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d168      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e24c      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x76>
 8002b0c:	4b80      	ldr	r3, [pc, #512]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a7f      	ldr	r2, [pc, #508]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	e02e      	b.n	8002b78 <HAL_RCC_OscConfig+0xd4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x98>
 8002b22:	4b7b      	ldr	r3, [pc, #492]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7a      	ldr	r2, [pc, #488]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a77      	ldr	r2, [pc, #476]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e01d      	b.n	8002b78 <HAL_RCC_OscConfig+0xd4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0xbc>
 8002b46:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a71      	ldr	r2, [pc, #452]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b6f      	ldr	r3, [pc, #444]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCC_OscConfig+0xd4>
 8002b60:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b68      	ldr	r3, [pc, #416]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a67      	ldr	r2, [pc, #412]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b80:	f7fd fe52 	bl	8000828 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fd fe4e 	bl	8000828 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e200      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	4b5d      	ldr	r3, [pc, #372]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0xe4>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fd fe3e 	bl	8000828 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fd fe3a 	bl	8000828 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1ec      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x10c>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d063      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bde:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bea:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x18c>
 8002bf6:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x176>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d001      	beq.n	8002c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e1c0      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4939      	ldr	r1, [pc, #228]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	e03a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c38:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fd fdf3 	bl	8000828 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c46:	f7fd fdef 	bl	8000828 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1a1      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c64:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4927      	ldr	r1, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	e015      	b.n	8002ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCC_OscConfig+0x270>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fd fdd2 	bl	8000828 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c88:	f7fd fdce 	bl	8000828 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e180      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d03a      	beq.n	8002d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d019      	beq.n	8002cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fd fdb2 	bl	8000828 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fd fdae 	bl	8000828 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e160      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	f000 fafe 	bl	80032e8 <RCC_Delay>
 8002cec:	e01c      	b.n	8002d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf4:	f7fd fd98 	bl	8000828 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfa:	e00f      	b.n	8002d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7fd fd94 	bl	8000828 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d908      	bls.n	8002d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e146      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	42420000 	.word	0x42420000
 8002d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e9      	bne.n	8002cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80a6 	beq.w	8002e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4b8b      	ldr	r3, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a87      	ldr	r2, [pc, #540]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b85      	ldr	r3, [pc, #532]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d118      	bne.n	8002da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d6e:	4b7f      	ldr	r3, [pc, #508]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7e      	ldr	r2, [pc, #504]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7a:	f7fd fd55 	bl	8000828 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d82:	f7fd fd51 	bl	8000828 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e103      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d94:	4b75      	ldr	r3, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x4c8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x312>
 8002da8:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a6e      	ldr	r2, [pc, #440]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6213      	str	r3, [r2, #32]
 8002db4:	e02d      	b.n	8002e12 <HAL_RCC_OscConfig+0x36e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x334>
 8002dbe:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6213      	str	r3, [r2, #32]
 8002dca:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	6213      	str	r3, [r2, #32]
 8002dd6:	e01c      	b.n	8002e12 <HAL_RCC_OscConfig+0x36e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCC_OscConfig+0x356>
 8002de0:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4a60      	ldr	r2, [pc, #384]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6213      	str	r3, [r2, #32]
 8002dec:	4b5e      	ldr	r3, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a5d      	ldr	r2, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e00b      	b.n	8002e12 <HAL_RCC_OscConfig+0x36e>
 8002dfa:	4b5b      	ldr	r3, [pc, #364]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4a5a      	ldr	r2, [pc, #360]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6213      	str	r3, [r2, #32]
 8002e06:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d015      	beq.n	8002e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fd fd05 	bl	8000828 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fd fd01 	bl	8000828 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0b1      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4b4b      	ldr	r3, [pc, #300]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ee      	beq.n	8002e22 <HAL_RCC_OscConfig+0x37e>
 8002e44:	e014      	b.n	8002e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fd fcef 	bl	8000828 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fd fceb 	bl	8000828 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e09b      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e64:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ee      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e76:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a3b      	ldr	r2, [pc, #236]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8087 	beq.w	8002f9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e8c:	4b36      	ldr	r3, [pc, #216]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d061      	beq.n	8002f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d146      	bne.n	8002f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fd fcbf 	bl	8000828 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fd fcbb 	bl	8000828 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e06d      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f0      	bne.n	8002eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4921      	ldr	r1, [pc, #132]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a19      	ldr	r1, [r3, #32]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fc8f 	bl	8000828 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fd fc8b 	bl	8000828 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e03d      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x46a>
 8002f2c:	e035      	b.n	8002f9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x4cc>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd fc78 	bl	8000828 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fd fc74 	bl	8000828 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e026      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x498>
 8002f5a:	e01e      	b.n	8002f9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e019      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x500>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0d0      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d910      	bls.n	8002fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 0207 	bic.w	r2, r3, #7
 8002fd2:	4965      	ldr	r1, [pc, #404]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0b8      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003004:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800300e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a52      	ldr	r2, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003026:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b50      	ldr	r3, [pc, #320]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	494d      	ldr	r1, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d040      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d115      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e07f      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e073      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06b      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b39      	ldr	r3, [pc, #228]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4936      	ldr	r1, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003098:	f7fd fbc6 	bl	8000828 <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7fd fbc2 	bl	8000828 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e053      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d210      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	4922      	ldr	r1, [pc, #136]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_RCC_ClockConfig+0x1c0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e032      	b.n	800315e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003136:	f000 f821 	bl	800317c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x1c8>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	fa22 f303 	lsr.w	r3, r2, r3
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <HAL_RCC_ClockConfig+0x1cc>)
 8003150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_ClockConfig+0x1d0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd fa6a 	bl	8000630 <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40022000 	.word	0x40022000
 800316c:	40021000 	.word	0x40021000
 8003170:	08009b6c 	.word	0x08009b6c
 8003174:	20000000 	.word	0x20000000
 8003178:	20000004 	.word	0x20000004

0800317c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	2300      	movs	r3, #0
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_RCC_GetSysClockFreq+0x94>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d002      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x30>
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d003      	beq.n	80031b2 <HAL_RCC_GetSysClockFreq+0x36>
 80031aa:	e027      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ae:	613b      	str	r3, [r7, #16]
      break;
 80031b0:	e027      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	0c9b      	lsrs	r3, r3, #18
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	4a17      	ldr	r2, [pc, #92]	; (8003218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d010      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_RCC_GetSysClockFreq+0x94>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	0c5b      	lsrs	r3, r3, #17
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	4a11      	ldr	r2, [pc, #68]	; (800321c <HAL_RCC_GetSysClockFreq+0xa0>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0d      	ldr	r2, [pc, #52]	; (8003214 <HAL_RCC_GetSysClockFreq+0x98>)
 80031de:	fb03 f202 	mul.w	r2, r3, r2
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e004      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	613b      	str	r3, [r7, #16]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetSysClockFreq+0x98>)
 80031fe:	613b      	str	r3, [r7, #16]
      break;
 8003200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003202:	693b      	ldr	r3, [r7, #16]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	007a1200 	.word	0x007a1200
 8003218:	08009b84 	.word	0x08009b84
 800321c:	08009b94 	.word	0x08009b94
 8003220:	003d0900 	.word	0x003d0900

08003224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b02      	ldr	r3, [pc, #8]	; (8003234 <HAL_RCC_GetHCLKFreq+0x10>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	20000000 	.word	0x20000000

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800323c:	f7ff fff2 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	08009b7c 	.word	0x08009b7c

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffde 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	0adb      	lsrs	r3, r3, #11
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	08009b7c 	.word	0x08009b7c

08003288 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	220f      	movs	r2, #15
 8003296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_RCC_GetClockConfig+0x58>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCC_GetClockConfig+0x5c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0207 	and.w	r2, r3, #7
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40022000 	.word	0x40022000

080032e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <RCC_Delay+0x34>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <RCC_Delay+0x38>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0a5b      	lsrs	r3, r3, #9
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003304:	bf00      	nop
  }
  while (Delay --);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <RCC_Delay+0x1c>
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	20000000 	.word	0x20000000
 8003320:	10624dd3 	.word	0x10624dd3

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d07d      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003344:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4a4b      	ldr	r2, [pc, #300]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335a:	61d3      	str	r3, [r2, #28]
 800335c:	4b49      	ldr	r3, [pc, #292]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003368:	2301      	movs	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b46      	ldr	r3, [pc, #280]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d118      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003378:	4b43      	ldr	r3, [pc, #268]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a42      	ldr	r2, [pc, #264]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003384:	f7fd fa50 	bl	8000828 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338a:	e008      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fd fa4c 	bl	8000828 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b64      	cmp	r3, #100	; 0x64
 8003398:	d901      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e06d      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339e:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d02e      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d027      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033de:	4a29      	ldr	r2, [pc, #164]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d014      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7fd fa1b 	bl	8000828 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7fd fa17 	bl	8000828 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f241 3288 	movw	r2, #5000	; 0x1388
 8003404:	4293      	cmp	r3, r2
 8003406:	d901      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e036      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0ee      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4917      	ldr	r1, [pc, #92]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	4313      	orrs	r3, r2
 8003428:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	490b      	ldr	r1, [pc, #44]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d008      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
 800348c:	42420440 	.word	0x42420440

08003490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e041      	b.n	8003526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f839 	bl	800352e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f000 f9b4 	bl	800383c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e03a      	b.n	80035ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <HAL_TIM_Base_Start_IT+0x98>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00e      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x58>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d009      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x58>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <HAL_TIM_Base_Start_IT+0x9c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x58>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d010      	beq.n	80035cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ba:	e007      	b.n	80035cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40000400 	.word	0x40000400
 80035e0:	40000800 	.word	0x40000800

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f8ed 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f8e0 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f8ef 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8c3 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8b6 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8c5 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0208 	mvn.w	r2, #8
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f899 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f88c 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f89b 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f86f 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f862 	bl	80037f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f871 	bl	8003818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fc fe8a 	bl	800047c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8bf 	bl	8003912 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d10e      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d107      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f835 	bl	800382a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d107      	bne.n	80037ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0220 	mvn.w	r2, #32
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f88a 	bl	8003900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <TIM_Base_SetConfig+0xb8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00b      	beq.n	800386c <TIM_Base_SetConfig+0x30>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385a:	d007      	beq.n	800386c <TIM_Base_SetConfig+0x30>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <TIM_Base_SetConfig+0xbc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <TIM_Base_SetConfig+0x30>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a25      	ldr	r2, [pc, #148]	; (80038fc <TIM_Base_SetConfig+0xc0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <TIM_Base_SetConfig+0xb8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00b      	beq.n	800389e <TIM_Base_SetConfig+0x62>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d007      	beq.n	800389e <TIM_Base_SetConfig+0x62>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <TIM_Base_SetConfig+0xbc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_Base_SetConfig+0x62>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a18      	ldr	r2, [pc, #96]	; (80038fc <TIM_Base_SetConfig+0xc0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d108      	bne.n	80038b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <TIM_Base_SetConfig+0xb8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d103      	bne.n	80038e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	615a      	str	r2, [r3, #20]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800

08003900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e042      	b.n	80039bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fc fe24 	bl	8000598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f82b 	bl	80039c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800397c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800398c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800399c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039fe:	f023 030c 	bic.w	r3, r3, #12
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2c      	ldr	r2, [pc, #176]	; (8003ad8 <UART_SetConfig+0x114>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7ff fc18 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	e002      	b.n	8003a3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7ff fc00 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8003a38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009a      	lsls	r2, r3, #2
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <UART_SetConfig+0x118>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	0119      	lsls	r1, r3, #4
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	009a      	lsls	r2, r3, #2
 8003a64:	441a      	add	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a70:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <UART_SetConfig+0x118>)
 8003a72:	fba3 0302 	umull	r0, r3, r3, r2
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2064      	movs	r0, #100	; 0x64
 8003a7a:	fb00 f303 	mul.w	r3, r0, r3
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	3332      	adds	r3, #50	; 0x32
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <UART_SetConfig+0x118>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a90:	4419      	add	r1, r3
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <UART_SetConfig+0x118>)
 8003aaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2064      	movs	r0, #100	; 0x64
 8003ab2:	fb00 f303 	mul.w	r3, r0, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <UART_SetConfig+0x118>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	440a      	add	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40013800 	.word	0x40013800
 8003adc:	51eb851f 	.word	0x51eb851f

08003ae0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	f107 0014 	add.w	r0, r7, #20
 8003aee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	b004      	add	sp, #16
 8003afe:	4770      	bx	lr

08003b00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b10:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b78:	b084      	sub	sp, #16
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	f107 0014 	add.w	r0, r7, #20
 8003b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	b004      	add	sp, #16
 8003bb6:	4770      	bx	lr

08003bb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b09d      	sub	sp, #116	; 0x74
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	78db      	ldrb	r3, [r3, #3]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d81f      	bhi.n	8003c2a <USB_ActivateEndpoint+0x72>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <USB_ActivateEndpoint+0x38>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c33 	.word	0x08003c33
 8003bfc:	08003c0f 	.word	0x08003c0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c0c:	e012      	b.n	8003c34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c12:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c1a:	e00b      	b.n	8003c34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c28:	e004      	b.n	8003c34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003c30:	e000      	b.n	8003c34 <USB_ActivateEndpoint+0x7c>
      break;
 8003c32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	441a      	add	r2, r3
 8003c84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	7b1b      	ldrb	r3, [r3, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f040 8178 	bne.w	8003f96 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	785b      	ldrb	r3, [r3, #1]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8084 	beq.w	8003db8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	011a      	lsls	r2, r3, #4
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	88db      	ldrh	r3, [r3, #6]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	827b      	strh	r3, [r7, #18]
 8003cf2:	8a7b      	ldrh	r3, [r7, #18]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <USB_ActivateEndpoint+0x17c>
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d12:	823b      	strh	r3, [r7, #16]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	8a3b      	ldrh	r3, [r7, #16]
 8003d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	78db      	ldrb	r3, [r3, #3]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d020      	beq.n	8003d7e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d52:	81bb      	strh	r3, [r7, #12]
 8003d54:	89bb      	ldrh	r3, [r7, #12]
 8003d56:	f083 0320 	eor.w	r3, r3, #32
 8003d5a:	81bb      	strh	r3, [r7, #12]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	89bb      	ldrh	r3, [r7, #12]
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e2d5      	b.n	800432a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d94:	81fb      	strh	r3, [r7, #14]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	441a      	add	r2, r3
 8003da0:	89fb      	ldrh	r3, [r7, #14]
 8003da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	8013      	strh	r3, [r2, #0]
 8003db6:	e2b8      	b.n	800432a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	4413      	add	r3, r2
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	011a      	lsls	r2, r3, #4
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	88db      	ldrh	r3, [r3, #6]
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	4413      	add	r3, r2
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	011a      	lsls	r2, r3, #4
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	4413      	add	r3, r2
 8003e0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2b3e      	cmp	r3, #62	; 0x3e
 8003e26:	d91d      	bls.n	8003e64 <USB_ActivateEndpoint+0x2ac>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <USB_ActivateEndpoint+0x28a>
 8003e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	e026      	b.n	8003eb2 <USB_ActivateEndpoint+0x2fa>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <USB_ActivateEndpoint+0x2ca>
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	e017      	b.n	8003eb2 <USB_ActivateEndpoint+0x2fa>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <USB_ActivateEndpoint+0x2e4>
 8003e96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e98:	3301      	adds	r3, #1
 8003e9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	029b      	lsls	r3, r3, #10
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01b      	beq.n	8003f02 <USB_ActivateEndpoint+0x34a>
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	843b      	strh	r3, [r7, #32]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8c3b      	ldrh	r3, [r7, #32]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d124      	bne.n	8003f54 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f20:	83bb      	strh	r3, [r7, #28]
 8003f22:	8bbb      	ldrh	r3, [r7, #28]
 8003f24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f28:	83bb      	strh	r3, [r7, #28]
 8003f2a:	8bbb      	ldrh	r3, [r7, #28]
 8003f2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f30:	83bb      	strh	r3, [r7, #28]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8bbb      	ldrh	r3, [r7, #28]
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
 8003f52:	e1ea      	b.n	800432a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	83fb      	strh	r3, [r7, #30]
 8003f6c:	8bfb      	ldrh	r3, [r7, #30]
 8003f6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f72:	83fb      	strh	r3, [r7, #30]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	441a      	add	r2, r3
 8003f7e:	8bfb      	ldrh	r3, [r7, #30]
 8003f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	8013      	strh	r3, [r2, #0]
 8003f94:	e1c9      	b.n	800432a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	78db      	ldrb	r3, [r3, #3]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d11e      	bne.n	8003fdc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	8013      	strh	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004014:	b29b      	uxth	r3, r3
 8004016:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004022:	b29b      	uxth	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004028:	4413      	add	r3, r2
 800402a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	011a      	lsls	r2, r3, #4
 8004032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004034:	4413      	add	r3, r2
 8004036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800403a:	65bb      	str	r3, [r7, #88]	; 0x58
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	891b      	ldrh	r3, [r3, #8]
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	b29b      	uxth	r3, r3
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	657b      	str	r3, [r7, #84]	; 0x54
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405c:	4413      	add	r3, r2
 800405e:	657b      	str	r3, [r7, #84]	; 0x54
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	011a      	lsls	r2, r3, #4
 8004066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004068:	4413      	add	r3, r2
 800406a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800406e:	653b      	str	r3, [r7, #80]	; 0x50
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	895b      	ldrh	r3, [r3, #10]
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 8093 	bne.w	80041b0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800409a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800409e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01b      	beq.n	80040de <USB_ActivateEndpoint+0x526>
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	441a      	add	r2, r3
 80040c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80040ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80040ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01b      	beq.n	800412e <USB_ActivateEndpoint+0x576>
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800411a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800412a:	b29b      	uxth	r3, r3
 800412c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	873b      	strh	r3, [r7, #56]	; 0x38
 8004146:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004148:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800414c:	873b      	strh	r3, [r7, #56]	; 0x38
 800414e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004150:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004154:	873b      	strh	r3, [r7, #56]	; 0x38
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	441a      	add	r2, r3
 8004160:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800416a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004172:	b29b      	uxth	r3, r3
 8004174:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]
 80041ae:	e0bc      	b.n	800432a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80041c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01d      	beq.n	8004208 <USB_ActivateEndpoint+0x650>
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	441a      	add	r2, r3
 80041f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80041f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004204:	b29b      	uxth	r3, r3
 8004206:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004218:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01d      	beq.n	8004260 <USB_ActivateEndpoint+0x6a8>
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800424c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004258:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800425c:	b29b      	uxth	r3, r3
 800425e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	78db      	ldrb	r3, [r3, #3]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d024      	beq.n	80042b2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004282:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004286:	f083 0320 	eor.w	r3, r3, #32
 800428a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]
 80042b0:	e01d      	b.n	80042ee <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004326:	b29b      	uxth	r3, r3
 8004328:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800432a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800432e:	4618      	mov	r0, r3
 8004330:	3774      	adds	r7, #116	; 0x74
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b0c2      	sub	sp, #264	; 0x108
 800433c:	af00      	add	r7, sp, #0
 800433e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004346:	6018      	str	r0, [r3, #0]
 8004348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800434c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004350:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	785b      	ldrb	r3, [r3, #1]
 800435e:	2b01      	cmp	r3, #1
 8004360:	f040 86b7 	bne.w	80050d2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d908      	bls.n	8004392 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004390:	e007      	b.n	80043a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	7b1b      	ldrb	r3, [r3, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d13a      	bne.n	8004428 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6959      	ldr	r1, [r3, #20]
 80043be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	88da      	ldrh	r2, [r3, #6]
 80043ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80043d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80043d8:	6800      	ldr	r0, [r0, #0]
 80043da:	f001 fc9c 	bl	8005d16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	011a      	lsls	r2, r3, #4
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	801a      	strh	r2, [r3, #0]
 8004424:	f000 be1f 	b.w	8005066 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800442c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	78db      	ldrb	r3, [r3, #3]
 8004434:	2b02      	cmp	r3, #2
 8004436:	f040 8462 	bne.w	8004cfe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800443a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800443e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800444a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	f240 83df 	bls.w	8004c16 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800445c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a1a      	ldr	r2, [r3, #32]
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c4:	1ad2      	subs	r2, r2, r3
 80044c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 81c7 	beq.w	8004888 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	633b      	str	r3, [r7, #48]	; 0x30
 8004506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800450a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d177      	bne.n	8004606 <USB_EPStartXfer+0x2ce>
 8004516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800451a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
 8004522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004526:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	4413      	add	r3, r2
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800453e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	011a      	lsls	r2, r3, #4
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	4413      	add	r3, r2
 800454c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455c:	b29a      	uxth	r2, r3
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004566:	2b3e      	cmp	r3, #62	; 0x3e
 8004568:	d921      	bls.n	80045ae <USB_EPStartXfer+0x276>
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <USB_EPStartXfer+0x252>
 8004580:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004584:	3b01      	subs	r3, #1
 8004586:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29a      	uxth	r2, r3
 8004590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004594:	b29b      	uxth	r3, r3
 8004596:	029b      	lsls	r3, r3, #10
 8004598:	b29b      	uxth	r3, r3
 800459a:	4313      	orrs	r3, r2
 800459c:	b29b      	uxth	r3, r3
 800459e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	e050      	b.n	8004650 <USB_EPStartXfer+0x318>
 80045ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <USB_EPStartXfer+0x294>
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e041      	b.n	8004650 <USB_EPStartXfer+0x318>
 80045cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80045d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <USB_EPStartXfer+0x2b4>
 80045e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80045e6:	3301      	adds	r3, #1
 80045e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	029b      	lsls	r3, r3, #10
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b29a      	uxth	r2, r3
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e024      	b.n	8004650 <USB_EPStartXfer+0x318>
 8004606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	785b      	ldrb	r3, [r3, #1]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d11c      	bne.n	8004650 <USB_EPStartXfer+0x318>
 8004616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800461a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	4413      	add	r3, r2
 800462c:	633b      	str	r3, [r7, #48]	; 0x30
 800462e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	011a      	lsls	r2, r3, #4
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	4413      	add	r3, r2
 8004640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800464a:	b29a      	uxth	r2, r3
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	895b      	ldrh	r3, [r3, #10]
 800465c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6959      	ldr	r1, [r3, #20]
 800466c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004670:	b29b      	uxth	r3, r3
 8004672:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004676:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800467a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	f001 fb49 	bl	8005d16 <USB_WritePMA>
            ep->xfer_buff += len;
 8004684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004694:	441a      	add	r2, r3
 8004696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800469a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80046a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d90f      	bls.n	80046de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80046be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	621a      	str	r2, [r3, #32]
 80046dc:	e00e      	b.n	80046fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80046de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80046ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d177      	bne.n	80047fc <USB_EPStartXfer+0x4c4>
 800470c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800471c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004726:	b29b      	uxth	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004734:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	011a      	lsls	r2, r3, #4
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	4413      	add	r3, r2
 8004742:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004752:	b29a      	uxth	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800475c:	2b3e      	cmp	r3, #62	; 0x3e
 800475e:	d921      	bls.n	80047a4 <USB_EPStartXfer+0x46c>
 8004760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800476a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2b00      	cmp	r3, #0
 8004774:	d104      	bne.n	8004780 <USB_EPStartXfer+0x448>
 8004776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477a:	3b01      	subs	r3, #1
 800477c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29a      	uxth	r2, r3
 8004786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800478a:	b29b      	uxth	r3, r3
 800478c:	029b      	lsls	r3, r3, #10
 800478e:	b29b      	uxth	r3, r3
 8004790:	4313      	orrs	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800479c:	b29a      	uxth	r2, r3
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e056      	b.n	8004852 <USB_EPStartXfer+0x51a>
 80047a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <USB_EPStartXfer+0x48a>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	e047      	b.n	8004852 <USB_EPStartXfer+0x51a>
 80047c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <USB_EPStartXfer+0x4aa>
 80047d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047dc:	3301      	adds	r3, #1
 80047de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	029b      	lsls	r3, r3, #10
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	4313      	orrs	r3, r2
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	e02a      	b.n	8004852 <USB_EPStartXfer+0x51a>
 80047fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d122      	bne.n	8004852 <USB_EPStartXfer+0x51a>
 800480c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800481c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	4413      	add	r3, r2
 800482e:	623b      	str	r3, [r7, #32]
 8004830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	4413      	add	r3, r2
 8004842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800484c:	b29a      	uxth	r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	891b      	ldrh	r3, [r3, #8]
 800485e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6959      	ldr	r1, [r3, #20]
 800486e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004872:	b29b      	uxth	r3, r3
 8004874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004878:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800487c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004880:	6800      	ldr	r0, [r0, #0]
 8004882:	f001 fa48 	bl	8005d16 <USB_WritePMA>
 8004886:	e3ee      	b.n	8005066 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800488c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d177      	bne.n	8004988 <USB_EPStartXfer+0x650>
 8004898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800489c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b8:	4413      	add	r3, r2
 80048ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80048bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d2:	647b      	str	r3, [r7, #68]	; 0x44
 80048d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e2:	801a      	strh	r2, [r3, #0]
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e8:	2b3e      	cmp	r3, #62	; 0x3e
 80048ea:	d921      	bls.n	8004930 <USB_EPStartXfer+0x5f8>
 80048ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <USB_EPStartXfer+0x5d4>
 8004902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004906:	3b01      	subs	r3, #1
 8004908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800490c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29a      	uxth	r2, r3
 8004912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004916:	b29b      	uxth	r3, r3
 8004918:	029b      	lsls	r3, r3, #10
 800491a:	b29b      	uxth	r3, r3
 800491c:	4313      	orrs	r3, r2
 800491e:	b29b      	uxth	r3, r3
 8004920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004928:	b29a      	uxth	r2, r3
 800492a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	e056      	b.n	80049de <USB_EPStartXfer+0x6a6>
 8004930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <USB_EPStartXfer+0x616>
 8004938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004946:	b29a      	uxth	r2, r3
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	801a      	strh	r2, [r3, #0]
 800494c:	e047      	b.n	80049de <USB_EPStartXfer+0x6a6>
 800494e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d004      	beq.n	800496e <USB_EPStartXfer+0x636>
 8004964:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004968:	3301      	adds	r3, #1
 800496a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800496e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29a      	uxth	r2, r3
 8004974:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004978:	b29b      	uxth	r3, r3
 800497a:	029b      	lsls	r3, r3, #10
 800497c:	b29b      	uxth	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	b29a      	uxth	r2, r3
 8004982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	e02a      	b.n	80049de <USB_EPStartXfer+0x6a6>
 8004988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d122      	bne.n	80049de <USB_EPStartXfer+0x6a6>
 8004998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800499c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	653b      	str	r3, [r7, #80]	; 0x50
 80049a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b8:	4413      	add	r3, r2
 80049ba:	653b      	str	r3, [r7, #80]	; 0x50
 80049bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	011a      	lsls	r2, r3, #4
 80049ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049cc:	4413      	add	r3, r2
 80049ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049d8:	b29a      	uxth	r2, r3
 80049da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	891b      	ldrh	r3, [r3, #8]
 80049ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6959      	ldr	r1, [r3, #20]
 80049fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004a04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a0c:	6800      	ldr	r0, [r0, #0]
 8004a0e:	f001 f982 	bl	8005d16 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a22:	441a      	add	r2, r3
 8004a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a1a      	ldr	r2, [r3, #32]
 8004a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d90f      	bls.n	8004a6c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a5c:	1ad2      	subs	r2, r2, r3
 8004a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	621a      	str	r2, [r3, #32]
 8004a6a:	e00e      	b.n	8004a8a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
 8004a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d177      	bne.n	8004b96 <USB_EPStartXfer+0x85e>
 8004aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	4413      	add	r3, r2
 8004ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	011a      	lsls	r2, r3, #4
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	4413      	add	r3, r2
 8004adc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af6:	2b3e      	cmp	r3, #62	; 0x3e
 8004af8:	d921      	bls.n	8004b3e <USB_EPStartXfer+0x806>
 8004afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <USB_EPStartXfer+0x7e2>
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	3b01      	subs	r3, #1
 8004b16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	029b      	lsls	r3, r3, #10
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	e050      	b.n	8004be0 <USB_EPStartXfer+0x8a8>
 8004b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <USB_EPStartXfer+0x824>
 8004b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	e041      	b.n	8004be0 <USB_EPStartXfer+0x8a8>
 8004b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <USB_EPStartXfer+0x844>
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	3301      	adds	r3, #1
 8004b78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	029b      	lsls	r3, r3, #10
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	e024      	b.n	8004be0 <USB_EPStartXfer+0x8a8>
 8004b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	785b      	ldrb	r3, [r3, #1]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d11c      	bne.n	8004be0 <USB_EPStartXfer+0x8a8>
 8004ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bba:	4413      	add	r3, r2
 8004bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8004bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	011a      	lsls	r2, r3, #4
 8004bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bce:	4413      	add	r3, r2
 8004bd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	895b      	ldrh	r3, [r3, #10]
 8004bec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6959      	ldr	r1, [r3, #20]
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	f001 f881 	bl	8005d16 <USB_WritePMA>
 8004c14:	e227      	b.n	8005066 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca2:	4413      	add	r3, r2
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	011a      	lsls	r2, r3, #4
 8004cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	891b      	ldrh	r3, [r3, #8]
 8004cd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6959      	ldr	r1, [r3, #20]
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004cee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cf2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cf6:	6800      	ldr	r0, [r0, #0]
 8004cf8:	f001 f80d 	bl	8005d16 <USB_WritePMA>
 8004cfc:	e1b3      	b.n	8005066 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6a1a      	ldr	r2, [r3, #32]
 8004d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80c6 	beq.w	8004ed0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	785b      	ldrb	r3, [r3, #1]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d177      	bne.n	8004e50 <USB_EPStartXfer+0xb18>
 8004d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d80:	4413      	add	r3, r2
 8004d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	011a      	lsls	r2, r3, #4
 8004d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d94:	4413      	add	r3, r2
 8004d96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d9a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004daa:	801a      	strh	r2, [r3, #0]
 8004dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db0:	2b3e      	cmp	r3, #62	; 0x3e
 8004db2:	d921      	bls.n	8004df8 <USB_EPStartXfer+0xac0>
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <USB_EPStartXfer+0xa9c>
 8004dca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	029b      	lsls	r3, r3, #10
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4313      	orrs	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	e050      	b.n	8004e9a <USB_EPStartXfer+0xb62>
 8004df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <USB_EPStartXfer+0xade>
 8004e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e12:	801a      	strh	r2, [r3, #0]
 8004e14:	e041      	b.n	8004e9a <USB_EPStartXfer+0xb62>
 8004e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <USB_EPStartXfer+0xafe>
 8004e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e30:	3301      	adds	r3, #1
 8004e32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	029b      	lsls	r3, r3, #10
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	4313      	orrs	r3, r2
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	e024      	b.n	8004e9a <USB_EPStartXfer+0xb62>
 8004e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d11c      	bne.n	8004e9a <USB_EPStartXfer+0xb62>
 8004e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e74:	4413      	add	r3, r2
 8004e76:	673b      	str	r3, [r7, #112]	; 0x70
 8004e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	011a      	lsls	r2, r3, #4
 8004e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e88:	4413      	add	r3, r2
 8004e8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	895b      	ldrh	r3, [r3, #10]
 8004ea6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6959      	ldr	r1, [r3, #20]
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ec0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ec4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ec8:	6800      	ldr	r0, [r0, #0]
 8004eca:	f000 ff24 	bl	8005d16 <USB_WritePMA>
 8004ece:	e0ca      	b.n	8005066 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d177      	bne.n	8004fd0 <USB_EPStartXfer+0xc98>
 8004ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f00:	4413      	add	r3, r2
 8004f02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	011a      	lsls	r2, r3, #4
 8004f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f14:	4413      	add	r3, r2
 8004f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	801a      	strh	r2, [r3, #0]
 8004f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f30:	2b3e      	cmp	r3, #62	; 0x3e
 8004f32:	d921      	bls.n	8004f78 <USB_EPStartXfer+0xc40>
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f38:	095b      	lsrs	r3, r3, #5
 8004f3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <USB_EPStartXfer+0xc1c>
 8004f4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	4313      	orrs	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f74:	801a      	strh	r2, [r3, #0]
 8004f76:	e05c      	b.n	8005032 <USB_EPStartXfer+0xcfa>
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <USB_EPStartXfer+0xc5e>
 8004f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f82:	881b      	ldrh	r3, [r3, #0]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e04d      	b.n	8005032 <USB_EPStartXfer+0xcfa>
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <USB_EPStartXfer+0xc7e>
 8004fac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e030      	b.n	8005032 <USB_EPStartXfer+0xcfa>
 8004fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d128      	bne.n	8005032 <USB_EPStartXfer+0xcfa>
 8004fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005004:	4413      	add	r3, r2
 8005006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800500a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800500e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800501c:	4413      	add	r3, r2
 800501e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800502a:	b29a      	uxth	r2, r3
 800502c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005030:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	891b      	ldrh	r3, [r3, #8]
 800503e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005046:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6959      	ldr	r1, [r3, #20]
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005052:	b29b      	uxth	r3, r3
 8005054:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005058:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800505c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005060:	6800      	ldr	r0, [r0, #0]
 8005062:	f000 fe58 	bl	8005d16 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800506a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	817b      	strh	r3, [r7, #10]
 800508e:	897b      	ldrh	r3, [r7, #10]
 8005090:	f083 0310 	eor.w	r3, r3, #16
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	897b      	ldrh	r3, [r7, #10]
 8005098:	f083 0320 	eor.w	r3, r3, #32
 800509c:	817b      	strh	r3, [r7, #10]
 800509e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	441a      	add	r2, r3
 80050b8:	897b      	ldrh	r3, [r7, #10]
 80050ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]
 80050ce:	f000 bcde 	b.w	8005a8e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80050d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	7b1b      	ldrb	r3, [r3, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 80bb 	bne.w	800525a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80050e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699a      	ldr	r2, [r3, #24]
 80050f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d917      	bls.n	8005130 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699a      	ldr	r2, [r3, #24]
 800511c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005120:	1ad2      	subs	r2, r2, r3
 8005122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	619a      	str	r2, [r3, #24]
 800512e:	e00e      	b.n	800514e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2200      	movs	r2, #0
 800514c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800514e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005152:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005172:	4413      	add	r3, r2
 8005174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	011a      	lsls	r2, r3, #4
 8005186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800518a:	4413      	add	r3, r2
 800518c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29b      	uxth	r3, r3
 800519c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ac:	2b3e      	cmp	r3, #62	; 0x3e
 80051ae:	d924      	bls.n	80051fa <USB_EPStartXfer+0xec2>
 80051b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <USB_EPStartXfer+0xe98>
 80051c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ca:	3b01      	subs	r3, #1
 80051cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051dc:	b29b      	uxth	r3, r3
 80051de:	029b      	lsls	r3, r3, #10
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	4313      	orrs	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	f000 bc10 	b.w	8005a1a <USB_EPStartXfer+0x16e2>
 80051fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10c      	bne.n	800521c <USB_EPStartXfer+0xee4>
 8005202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005212:	b29a      	uxth	r2, r3
 8005214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e3fe      	b.n	8005a1a <USB_EPStartXfer+0x16e2>
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <USB_EPStartXfer+0xf04>
 8005232:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005236:	3301      	adds	r3, #1
 8005238:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800523c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29a      	uxth	r2, r3
 8005244:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005248:	b29b      	uxth	r3, r3
 800524a:	029b      	lsls	r3, r3, #10
 800524c:	b29b      	uxth	r3, r3
 800524e:	4313      	orrs	r3, r2
 8005250:	b29a      	uxth	r2, r3
 8005252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e3df      	b.n	8005a1a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800525a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	78db      	ldrb	r3, [r3, #3]
 8005266:	2b02      	cmp	r3, #2
 8005268:	f040 8218 	bne.w	800569c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800526c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f040 809d 	bne.w	80053b8 <USB_EPStartXfer+0x1080>
 800527e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052a2:	4413      	add	r3, r2
 80052a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	011a      	lsls	r2, r3, #4
 80052b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052ba:	4413      	add	r3, r2
 80052bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052d6:	801a      	strh	r2, [r3, #0]
 80052d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b3e      	cmp	r3, #62	; 0x3e
 80052e6:	d92b      	bls.n	8005340 <USB_EPStartXfer+0x1008>
 80052e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <USB_EPStartXfer+0xfe0>
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005312:	3b01      	subs	r3, #1
 8005314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29a      	uxth	r2, r3
 8005320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29b      	uxth	r3, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005336:	b29a      	uxth	r2, r3
 8005338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	e070      	b.n	8005422 <USB_EPStartXfer+0x10ea>
 8005340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10c      	bne.n	800536a <USB_EPStartXfer+0x1032>
 8005350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005360:	b29a      	uxth	r2, r3
 8005362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	e05b      	b.n	8005422 <USB_EPStartXfer+0x10ea>
 800536a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800537c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <USB_EPStartXfer+0x1062>
 8005390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005394:	3301      	adds	r3, #1
 8005396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800539a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4313      	orrs	r3, r2
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e034      	b.n	8005422 <USB_EPStartXfer+0x10ea>
 80053b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d12c      	bne.n	8005422 <USB_EPStartXfer+0x10ea>
 80053c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053ec:	4413      	add	r3, r2
 80053ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	011a      	lsls	r2, r3, #4
 8005400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005404:	4413      	add	r3, r2
 8005406:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800540a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800540e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	b29a      	uxth	r2, r3
 800541c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 809d 	bne.w	800557c <USB_EPStartXfer+0x1244>
 8005442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545e:	b29b      	uxth	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005466:	4413      	add	r3, r2
 8005468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800546c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	011a      	lsls	r2, r3, #4
 800547a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800547e:	4413      	add	r3, r2
 8005480:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005494:	b29a      	uxth	r2, r3
 8005496:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b3e      	cmp	r3, #62	; 0x3e
 80054aa:	d92b      	bls.n	8005504 <USB_EPStartXfer+0x11cc>
 80054ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <USB_EPStartXfer+0x11a4>
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d6:	3b01      	subs	r3, #1
 80054d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80054dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005500:	801a      	strh	r2, [r3, #0]
 8005502:	e069      	b.n	80055d8 <USB_EPStartXfer+0x12a0>
 8005504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <USB_EPStartXfer+0x11f6>
 8005514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005524:	b29a      	uxth	r2, r3
 8005526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	e054      	b.n	80055d8 <USB_EPStartXfer+0x12a0>
 800552e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <USB_EPStartXfer+0x1226>
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005558:	3301      	adds	r3, #1
 800555a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800555e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29a      	uxth	r2, r3
 8005566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556a:	b29b      	uxth	r3, r3
 800556c:	029b      	lsls	r3, r3, #10
 800556e:	b29b      	uxth	r3, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e02d      	b.n	80055d8 <USB_EPStartXfer+0x12a0>
 800557c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d125      	bne.n	80055d8 <USB_EPStartXfer+0x12a0>
 800558c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559a:	b29b      	uxth	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055a2:	4413      	add	r3, r2
 80055a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	011a      	lsls	r2, r3, #4
 80055b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80055ba:	4413      	add	r3, r2
 80055bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80055d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8218 	beq.w	8005a1a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80055ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800560a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800560e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <USB_EPStartXfer+0x12ea>
 8005616:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10d      	bne.n	800563e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005622:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 81f5 	bne.w	8005a1a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005630:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b00      	cmp	r3, #0
 800563a:	f040 81ee 	bne.w	8005a1a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800563e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	441a      	add	r2, r3
 8005682:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800568e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005692:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005696:	b29b      	uxth	r3, r3
 8005698:	8013      	strh	r3, [r2, #0]
 800569a:	e1be      	b.n	8005a1a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800569c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	78db      	ldrb	r3, [r3, #3]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	f040 81b4 	bne.w	8005a16 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80056ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d917      	bls.n	80056fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80056da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ea:	1ad2      	subs	r2, r2, r3
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	619a      	str	r2, [r3, #24]
 80056f8:	e00e      	b.n	8005718 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80056fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800570a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f040 8085 	bne.w	8005834 <USB_EPStartXfer+0x14fc>
 800572a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800574e:	4413      	add	r3, r2
 8005750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	011a      	lsls	r2, r3, #4
 8005762:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005766:	4413      	add	r3, r2
 8005768:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800576c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005770:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577c:	b29a      	uxth	r2, r3
 800577e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005788:	2b3e      	cmp	r3, #62	; 0x3e
 800578a:	d923      	bls.n	80057d4 <USB_EPStartXfer+0x149c>
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <USB_EPStartXfer+0x1474>
 80057a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a6:	3b01      	subs	r3, #1
 80057a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e060      	b.n	8005896 <USB_EPStartXfer+0x155e>
 80057d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10c      	bne.n	80057f6 <USB_EPStartXfer+0x14be>
 80057dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	e04f      	b.n	8005896 <USB_EPStartXfer+0x155e>
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <USB_EPStartXfer+0x14de>
 800580c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005810:	3301      	adds	r3, #1
 8005812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29a      	uxth	r2, r3
 800581e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005822:	b29b      	uxth	r3, r3
 8005824:	029b      	lsls	r3, r3, #10
 8005826:	b29b      	uxth	r3, r3
 8005828:	4313      	orrs	r3, r2
 800582a:	b29a      	uxth	r2, r3
 800582c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	e030      	b.n	8005896 <USB_EPStartXfer+0x155e>
 8005834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d128      	bne.n	8005896 <USB_EPStartXfer+0x155e>
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005860:	b29b      	uxth	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005868:	4413      	add	r3, r2
 800586a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800586e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	011a      	lsls	r2, r3, #4
 800587c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005880:	4413      	add	r3, r2
 8005882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005886:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 8085 	bne.w	80059c0 <USB_EPStartXfer+0x1688>
 80058b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058da:	4413      	add	r3, r2
 80058dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80058e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	011a      	lsls	r2, r3, #4
 80058ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058f2:	4413      	add	r3, r2
 80058f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005914:	2b3e      	cmp	r3, #62	; 0x3e
 8005916:	d923      	bls.n	8005960 <USB_EPStartXfer+0x1628>
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <USB_EPStartXfer+0x1600>
 800592e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005932:	3b01      	subs	r3, #1
 8005934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005938:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29a      	uxth	r2, r3
 8005940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005944:	b29b      	uxth	r3, r3
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	b29b      	uxth	r3, r3
 800594a:	4313      	orrs	r3, r2
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005956:	b29a      	uxth	r2, r3
 8005958:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e05c      	b.n	8005a1a <USB_EPStartXfer+0x16e2>
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10c      	bne.n	8005982 <USB_EPStartXfer+0x164a>
 8005968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005978:	b29a      	uxth	r2, r3
 800597a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e04b      	b.n	8005a1a <USB_EPStartXfer+0x16e2>
 8005982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d004      	beq.n	80059a2 <USB_EPStartXfer+0x166a>
 8005998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800599c:	3301      	adds	r3, #1
 800599e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4313      	orrs	r3, r2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e02c      	b.n	8005a1a <USB_EPStartXfer+0x16e2>
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d124      	bne.n	8005a1a <USB_EPStartXfer+0x16e2>
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059de:	b29b      	uxth	r3, r3
 80059e0:	461a      	mov	r2, r3
 80059e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059e6:	4413      	add	r3, r2
 80059e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	011a      	lsls	r2, r3, #4
 80059fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059fe:	4413      	add	r3, r2
 8005a00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e001      	b.n	8005a1a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e03a      	b.n	8005a90 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005a44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005a4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005a50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	441a      	add	r2, r3
 8005a76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d020      	beq.n	8005aee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac2:	81bb      	strh	r3, [r7, #12]
 8005ac4:	89bb      	ldrh	r3, [r7, #12]
 8005ac6:	f083 0310 	eor.w	r3, r3, #16
 8005aca:	81bb      	strh	r3, [r7, #12]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	441a      	add	r2, r3
 8005ad6:	89bb      	ldrh	r3, [r7, #12]
 8005ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	8013      	strh	r3, [r2, #0]
 8005aec:	e01f      	b.n	8005b2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b04:	81fb      	strh	r3, [r7, #14]
 8005b06:	89fb      	ldrh	r3, [r7, #14]
 8005b08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b0c:	81fb      	strh	r3, [r7, #14]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	89fb      	ldrh	r3, [r7, #14]
 8005b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b087      	sub	sp, #28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	7b1b      	ldrb	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 809d 	bne.w	8005c88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d04c      	beq.n	8005bf0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	823b      	strh	r3, [r7, #16]
 8005b64:	8a3b      	ldrh	r3, [r7, #16]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01b      	beq.n	8005ba6 <USB_EPClearStall+0x6c>
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b84:	81fb      	strh	r3, [r7, #14]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	441a      	add	r2, r3
 8005b90:	89fb      	ldrh	r3, [r7, #14]
 8005b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	78db      	ldrb	r3, [r3, #3]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d06c      	beq.n	8005c88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc4:	81bb      	strh	r3, [r7, #12]
 8005bc6:	89bb      	ldrh	r3, [r7, #12]
 8005bc8:	f083 0320 	eor.w	r3, r3, #32
 8005bcc:	81bb      	strh	r3, [r7, #12]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	441a      	add	r2, r3
 8005bd8:	89bb      	ldrh	r3, [r7, #12]
 8005bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	8013      	strh	r3, [r2, #0]
 8005bee:	e04b      	b.n	8005c88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	82fb      	strh	r3, [r7, #22]
 8005bfe:	8afb      	ldrh	r3, [r7, #22]
 8005c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01b      	beq.n	8005c40 <USB_EPClearStall+0x106>
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	82bb      	strh	r3, [r7, #20]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	8abb      	ldrh	r3, [r7, #20]
 8005c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c56:	827b      	strh	r3, [r7, #18]
 8005c58:	8a7b      	ldrh	r3, [r7, #18]
 8005c5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c5e:	827b      	strh	r3, [r7, #18]
 8005c60:	8a7b      	ldrh	r3, [r7, #18]
 8005c62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c66:	827b      	strh	r3, [r7, #18]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	8a7b      	ldrh	r3, [r7, #18]
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2280      	movs	r2, #128	; 0x80
 8005caa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr

08005ce2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b08b      	sub	sp, #44	; 0x2c
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	4611      	mov	r1, r2
 8005d22:	461a      	mov	r2, r3
 8005d24:	460b      	mov	r3, r1
 8005d26:	80fb      	strh	r3, [r7, #6]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d2c:	88bb      	ldrh	r3, [r7, #4]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	005a      	lsls	r2, r3, #1
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4e:	e01e      	b.n	8005d8e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	b21a      	sxth	r2, r3
 8005d60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	b21b      	sxth	r3, r3
 8005d68:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	8a7a      	ldrh	r2, [r7, #18]
 8005d6e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	3302      	adds	r3, #2
 8005d74:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	3302      	adds	r3, #2
 8005d7a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	3301      	adds	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1dd      	bne.n	8005d50 <USB_WritePMA+0x3a>
  }
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	372c      	adds	r7, #44	; 0x2c
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b08b      	sub	sp, #44	; 0x2c
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	4611      	mov	r1, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	460b      	mov	r3, r1
 8005db0:	80fb      	strh	r3, [r7, #6]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005db6:	88bb      	ldrh	r3, [r7, #4]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	005a      	lsls	r2, r3, #1
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd8:	e01b      	b.n	8005e12 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	3302      	adds	r3, #2
 8005de6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	3301      	adds	r3, #1
 8005df4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3301      	adds	r3, #1
 8005e04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	3302      	adds	r3, #2
 8005e0a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e0      	bne.n	8005dda <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005e18:	88bb      	ldrh	r3, [r7, #4]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	701a      	strb	r2, [r3, #0]
  }
}
 8005e34:	bf00      	nop
 8005e36:	372c      	adds	r7, #44	; 0x2c
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
	...

08005e40 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005e44:	f3bf 8f4f 	dsb	sy
}
 8005e48:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <__NVIC_SystemReset+0x24>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005e52:	4904      	ldr	r1, [pc, #16]	; (8005e64 <__NVIC_SystemReset+0x24>)
 8005e54:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <__NVIC_SystemReset+0x28>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e5a:	f3bf 8f4f 	dsb	sy
}
 8005e5e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <__NVIC_SystemReset+0x20>
 8005e64:	e000ed00 	.word	0xe000ed00
 8005e68:	05fa0004 	.word	0x05fa0004

08005e6c <USBD_DFU_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_Init(USBD_HandleTypeDef *pdev,
                              uint8_t cfgidx)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8005e78:	f240 401c 	movw	r0, #1052	; 0x41c
 8005e7c:	f003 fcac 	bl	80097d8 <USBD_static_malloc>
 8005e80:	4602      	mov	r2, r0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <USBD_DFU_Init+0x2a>
  {
    return USBD_FAIL;
 8005e92:	2302      	movs	r3, #2
 8005e94:	e03f      	b.n	8005f16 <USBD_DFU_Init+0xaa>
  }
  else
  {
    hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9c:	60fb      	str	r3, [r7, #12]

    hdfu->alt_setting = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005eac:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    hdfu->wblock_num = 0U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

    hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    hdfu->dev_state = DFU_STATE_IDLE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    /* Initialize Hardware layer */
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <USBD_DFU_Init+0xa8>
    {
      return USBD_FAIL;
 8005f10:	2302      	movs	r3, #2
 8005f12:	e000      	b.n	8005f16 <USBD_DFU_Init+0xaa>
    }
  }
  return USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <USBD_DFU_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_DFU_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  USBD_DFU_HandleTypeDef   *hdfu;
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f30:	60fb      	str	r3, [r7, #12]

  hdfu->wblock_num = 0U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00e      	beq.n	8005f82 <USBD_DFU_DeInit+0x64>
  {
    /* De-Initialize Hardware layer */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f74:	4618      	mov	r0, r3
 8005f76:	f003 fc3b 	bl	80097f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_DFU_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_DFU_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;
  uint8_t *pbuf = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  uint16_t len = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	827b      	strh	r3, [r7, #18]
  uint16_t status_info = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	817b      	strh	r3, [r7, #10]
  uint8_t ret = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	747b      	strb	r3, [r7, #17]

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fac:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d03f      	beq.n	800603a <USBD_DFU_Setup+0xae>
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	f040 80c2 	bne.w	8006144 <USBD_DFU_Setup+0x1b8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b06      	cmp	r3, #6
 8005fc6:	d830      	bhi.n	800602a <USBD_DFU_Setup+0x9e>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <USBD_DFU_Setup+0x44>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08006021 	.word	0x08006021
 8005fd4:	08005fed 	.word	0x08005fed
 8005fd8:	08005ff7 	.word	0x08005ff7
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	08006019 	.word	0x08006019
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa8e 	bl	8006510 <DFU_Download>
          break;
 8005ff4:	e020      	b.n	8006038 <USBD_DFU_Setup+0xac>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 faf3 	bl	80065e4 <DFU_Upload>
          break;
 8005ffe:	e01b      	b.n	8006038 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fbc7 	bl	8006794 <DFU_GetStatus>
          break;
 8006006:	e017      	b.n	8006038 <USBD_DFU_Setup+0xac>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fc75 	bl	80068f8 <DFU_ClearStatus>
          break;
 800600e:	e013      	b.n	8006038 <USBD_DFU_Setup+0xac>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fcc0 	bl	8006996 <DFU_GetState>
          break;
 8006016:	e00f      	b.n	8006038 <USBD_DFU_Setup+0xac>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fcd0 	bl	80069be <DFU_Abort>
          break;
 800601e:	e00b      	b.n	8006038 <USBD_DFU_Setup+0xac>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa14 	bl	8006450 <DFU_Detach>
          break;
 8006028:	e006      	b.n	8006038 <USBD_DFU_Setup+0xac>

        default:
          USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fd34 	bl	8007a9a <USBD_CtlError>
          ret = USBD_FAIL;
 8006032:	2302      	movs	r3, #2
 8006034:	747b      	strb	r3, [r7, #17]
          break;
 8006036:	bf00      	nop
      }
      break;
 8006038:	e08b      	b.n	8006152 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b0b      	cmp	r3, #11
 8006040:	d878      	bhi.n	8006134 <USBD_DFU_Setup+0x1a8>
 8006042:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <USBD_DFU_Setup+0xbc>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006079 	.word	0x08006079
 800604c:	08006135 	.word	0x08006135
 8006050:	08006135 	.word	0x08006135
 8006054:	08006135 	.word	0x08006135
 8006058:	08006135 	.word	0x08006135
 800605c:	08006135 	.word	0x08006135
 8006060:	080060a1 	.word	0x080060a1
 8006064:	08006135 	.word	0x08006135
 8006068:	08006135 	.word	0x08006135
 800606c:	08006135 	.word	0x08006135
 8006070:	080060cb 	.word	0x080060cb
 8006074:	080060f5 	.word	0x080060f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607e:	2b03      	cmp	r3, #3
 8006080:	d107      	bne.n	8006092 <USBD_DFU_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006082:	f107 030a 	add.w	r3, r7, #10
 8006086:	2202      	movs	r2, #2
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 fd6f 	bl	8007b6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006090:	e057      	b.n	8006142 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fd00 	bl	8007a9a <USBD_CtlError>
            ret = USBD_FAIL;
 800609a:	2302      	movs	r3, #2
 800609c:	747b      	strb	r3, [r7, #17]
          break;
 800609e:	e050      	b.n	8006142 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	885b      	ldrh	r3, [r3, #2]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b21      	cmp	r3, #33	; 0x21
 80060aa:	d107      	bne.n	80060bc <USBD_DFU_Setup+0x130>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80060ac:	4b2b      	ldr	r3, [pc, #172]	; (800615c <USBD_DFU_Setup+0x1d0>)
 80060ae:	617b      	str	r3, [r7, #20]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	88db      	ldrh	r3, [r3, #6]
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	bf28      	it	cs
 80060b8:	2309      	movcs	r3, #9
 80060ba:	827b      	strh	r3, [r7, #18]
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80060bc:	8a7b      	ldrh	r3, [r7, #18]
 80060be:	461a      	mov	r2, r3
 80060c0:	6979      	ldr	r1, [r7, #20]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 fd53 	bl	8007b6e <USBD_CtlSendData>
          break;
 80060c8:	e03b      	b.n	8006142 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d108      	bne.n	80060e6 <USBD_DFU_Setup+0x15a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060da:	2201      	movs	r2, #1
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 fd45 	bl	8007b6e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060e4:	e02d      	b.n	8006142 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fcd6 	bl	8007a9a <USBD_CtlError>
            ret = USBD_FAIL;
 80060ee:	2302      	movs	r3, #2
 80060f0:	747b      	strb	r3, [r7, #17]
          break;
 80060f2:	e026      	b.n	8006142 <USBD_DFU_Setup+0x1b6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	885b      	ldrh	r3, [r3, #2]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d113      	bne.n	8006126 <USBD_DFU_Setup+0x19a>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006104:	2b03      	cmp	r3, #3
 8006106:	d107      	bne.n	8006118 <USBD_DFU_Setup+0x18c>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	885b      	ldrh	r3, [r3, #2]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be nacked */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006116:	e014      	b.n	8006142 <USBD_DFU_Setup+0x1b6>
              USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fcbd 	bl	8007a9a <USBD_CtlError>
              ret = USBD_FAIL;
 8006120:	2302      	movs	r3, #2
 8006122:	747b      	strb	r3, [r7, #17]
          break;
 8006124:	e00d      	b.n	8006142 <USBD_DFU_Setup+0x1b6>
            USBD_CtlError(pdev, req);
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 fcb6 	bl	8007a9a <USBD_CtlError>
            ret = USBD_FAIL;
 800612e:	2302      	movs	r3, #2
 8006130:	747b      	strb	r3, [r7, #17]
          break;
 8006132:	e006      	b.n	8006142 <USBD_DFU_Setup+0x1b6>

        default:
          USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fcaf 	bl	8007a9a <USBD_CtlError>
          ret = USBD_FAIL;
 800613c:	2302      	movs	r3, #2
 800613e:	747b      	strb	r3, [r7, #17]
          break;
 8006140:	bf00      	nop
      }
      break;
 8006142:	e006      	b.n	8006152 <USBD_DFU_Setup+0x1c6>

    default:
      USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 fca7 	bl	8007a9a <USBD_CtlError>
      ret = USBD_FAIL;
 800614c:	2302      	movs	r3, #2
 800614e:	747b      	strb	r3, [r7, #17]
      break;
 8006150:	bf00      	nop
  }

  return ret;
 8006152:	7c7b      	ldrb	r3, [r7, #17]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	2000005a 	.word	0x2000005a

08006160 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_CfgDesc);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	221b      	movs	r2, #27
 800616c:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_CfgDesc;
 800616e:	4b03      	ldr	r3, [pc, #12]	; (800617c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000048 	.word	0x20000048

08006180 <USBD_DFU_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t addr;
  USBD_SetupReqTypedef     req;
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ba:	617b      	str	r3, [r7, #20]

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	f040 80ca 	bne.w	800635c <USBD_DFU_EP0_TxReady+0x1b0>
  {
    /* Decode the Special Command*/
    if (hdfu->wblock_num == 0U)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 8086 	bne.w	80062e0 <USBD_DFU_EP0_TxReady+0x134>
    {
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d105      	bne.n	80061e8 <USBD_DFU_EP0_TxReady+0x3c>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	f000 809a 	beq.w	800631c <USBD_DFU_EP0_TxReady+0x170>
      {

      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b21      	cmp	r3, #33	; 0x21
 80061ee:	d129      	bne.n	8006244 <USBD_DFU_EP0_TxReady+0x98>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d124      	bne.n	8006244 <USBD_DFU_EP0_TxReady+0x98>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	461a      	mov	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	789b      	ldrb	r3, [r3, #2]
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	441a      	add	r2, r3
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	441a      	add	r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	791b      	ldrb	r3, [r3, #4]
 8006238:	061b      	lsls	r3, r3, #24
 800623a:	441a      	add	r2, r3
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8006242:	e06b      	b.n	800631c <USBD_DFU_EP0_TxReady+0x170>
      }
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b41      	cmp	r3, #65	; 0x41
 800624a:	d136      	bne.n	80062ba <USBD_DFU_EP0_TxReady+0x10e>
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006252:	2b05      	cmp	r3, #5
 8006254:	d131      	bne.n	80062ba <USBD_DFU_EP0_TxReady+0x10e>
      {
        hdfu->data_ptr = hdfu->buffer.d8[1];
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	461a      	mov	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	789b      	ldrb	r3, [r3, #2]
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	441a      	add	r2, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	441a      	add	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	791b      	ldrb	r3, [r3, #4]
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	441a      	add	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d032      	beq.n	800631c <USBD_DFU_EP0_TxReady+0x170>
        {
          return USBD_FAIL;
 80062b6:	2302      	movs	r3, #2
 80062b8:	e059      	b.n	800636e <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be nacked) */
        req.bmRequest = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 80062ce:	2301      	movs	r3, #1
 80062d0:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fbde 	bl	8007a9a <USBD_CtlError>
 80062de:	e01d      	b.n	800631c <USBD_DFU_EP0_TxReady+0x170>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d918      	bls.n	800631c <USBD_DFU_EP0_TxReady+0x170>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80062f0:	3b02      	subs	r3, #2
 80062f2:	029a      	lsls	r2, r3, #10
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80062fa:	4413      	add	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]

        /* Preform the write operation */
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	6978      	ldr	r0, [r7, #20]
 8006308:	6939      	ldr	r1, [r7, #16]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8006310:	4798      	blx	r3
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <USBD_DFU_EP0_TxReady+0x170>
                                                              (uint8_t *)addr, hdfu->wlength) != USBD_OK)
        {
          return USBD_FAIL;
 8006318:	2302      	movs	r3, #2
 800631a:	e028      	b.n	800636e <USBD_DFU_EP0_TxReady+0x1c2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2203      	movs	r2, #3
 8006330:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return USBD_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	e008      	b.n	800636e <USBD_DFU_EP0_TxReady+0x1c2>
  }
  else
  {
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006362:	2b07      	cmp	r3, #7
 8006364:	d102      	bne.n	800636c <USBD_DFU_EP0_TxReady+0x1c0>
    {
      /* Start leaving DFU mode */
      DFU_Leave(pdev);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fb76 	bl	8006a58 <DFU_Leave>
    }
  }

  return USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]

  return USBD_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <USBD_DFU_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr

080063a2 <USBD_DFU_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <USBD_DFU_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_DFU_DataOut(USBD_HandleTypeDef *pdev,
                                 uint8_t epnum)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	460b      	mov	r3, r1
 80063c4:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
	...

080063d4 <USBD_DFU_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	220a      	movs	r2, #10
 80063e0:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceQualifierDesc;
 80063e2:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000064 	.word	0x20000064

080063f4 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	460b      	mov	r3, r1
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	2b06      	cmp	r3, #6
 8006406:	d80a      	bhi.n	800641e <USBD_DFU_GetUsrStringDesc+0x2a>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	4905      	ldr	r1, [pc, #20]	; (8006428 <USBD_DFU_GetUsrStringDesc+0x34>)
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fb51 	bl	8007abc <USBD_GetString>
    return USBD_StrDesc;
 800641a:	4b03      	ldr	r3, [pc, #12]	; (8006428 <USBD_DFU_GetUsrStringDesc+0x34>)
 800641c:	e000      	b.n	8006420 <USBD_DFU_GetUsrStringDesc+0x2c>
  }
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
 800641e:	2300      	movs	r3, #0
  }
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200004e0 	.word	0x200004e0

0800642c <USBD_DFU_RegisterMedia>:
* @param  fops: storage callback
* @retval status
*/
uint8_t  USBD_DFU_RegisterMedia(USBD_HandleTypeDef   *pdev,
                                USBD_DFU_MediaTypeDef *fops)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <USBD_DFU_RegisterMedia+0x18>
  {
    pdev->pUserData = fops;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  return 0U;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr

08006450 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006460:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006468:	2b02      	cmp	r3, #2
 800646a:	d013      	beq.n	8006494 <DFU_Detach+0x44>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006472:	2b03      	cmp	r3, #3
 8006474:	d00e      	beq.n	8006494 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800647c:	2b05      	cmp	r3, #5
 800647e:	d009      	beq.n	8006494 <DFU_Detach+0x44>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006486:	2b06      	cmp	r3, #6
 8006488:	d004      	beq.n	8006494 <DFU_Detach+0x44>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006490:	2b09      	cmp	r3, #9
 8006492:	d125      	bne.n	80064e0 <DFU_Detach+0x90>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <DFU_Detach+0xbc>)
 80064e2:	7d5b      	ldrb	r3, [r3, #21]
 80064e4:	f003 0310 	and.w	r3, r3, #16
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d006      	beq.n	80064fa <DFU_Detach+0xaa>
  {
    /* Perform an Attach-Detach operation on USB bus */
    USBD_Stop(pdev);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fb51 	bl	8006b94 <USBD_Stop>
    USBD_Start(pdev);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fb42 	bl	8006b7c <USBD_Start>
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
  }
}
 80064f8:	e004      	b.n	8006504 <DFU_Detach+0xb4>
    USBD_Delay((uint32_t)req->wValue);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fa f99c 	bl	800083c <HAL_Delay>
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20000048 	.word	0x20000048

08006510 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006520:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	88db      	ldrh	r3, [r3, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d02e      	beq.n	8006588 <DFU_Download+0x78>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006530:	2b02      	cmp	r3, #2
 8006532:	d004      	beq.n	800653e <DFU_Download+0x2e>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800653a:	2b05      	cmp	r3, #5
 800653c:	d11f      	bne.n	800657e <DFU_Download+0x6e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	461a      	mov	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	461a      	mov	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2203      	movs	r2, #3
 800655a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 800656a:	68f9      	ldr	r1, [r7, #12]
                        (uint16_t)hdfu->wlength);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 8006572:	b29b      	uxth	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 fb27 	bl	8007bca <USBD_CtlPrepareRx>
 800657c:	e02e      	b.n	80065dc <DFU_Download+0xcc>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fa8a 	bl	8007a9a <USBD_CtlError>
    {
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
    }
  }
}
 8006586:	e029      	b.n	80065dc <DFU_Download+0xcc>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800658e:	2b05      	cmp	r3, #5
 8006590:	d004      	beq.n	800659c <DFU_Download+0x8c>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006598:	2b02      	cmp	r3, #2
 800659a:	d11a      	bne.n	80065d2 <DFU_Download+0xc2>
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2206      	movs	r2, #6
 80065a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80065d0:	e004      	b.n	80065dc <DFU_Download+0xcc>
      USBD_CtlError(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fa60 	bl	8007a9a <USBD_CtlError>
}
 80065da:	e7ff      	b.n	80065dc <DFU_Download+0xcc>
 80065dc:	bf00      	nop
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f4:	617b      	str	r3, [r7, #20]

  uint8_t *phaddr = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
  uint32_t addr = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Data setup request */
  if (req->wLength > 0U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	88db      	ldrh	r3, [r3, #6]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80ab 	beq.w	800675e <DFU_Upload+0x17a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800660e:	2b02      	cmp	r3, #2
 8006610:	d005      	beq.n	800661e <DFU_Upload+0x3a>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8006618:	2b09      	cmp	r3, #9
 800661a:	f040 8093 	bne.w	8006744 <DFU_Upload+0x160>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	885b      	ldrh	r3, [r3, #2]
 8006622:	461a      	mov	r2, r3
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	88db      	ldrh	r3, [r3, #6]
 800662e:	461a      	mov	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800663c:	2b00      	cmp	r3, #0
 800663e:	d12c      	bne.n	800669a <DFU_Upload+0xb6>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006646:	2b03      	cmp	r3, #3
 8006648:	d901      	bls.n	800664e <DFU_Upload+0x6a>
 800664a:	2202      	movs	r2, #2
 800664c:	e000      	b.n	8006650 <DFU_Upload+0x6c>
 800664e:	2209      	movs	r2, #9
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2221      	movs	r2, #33	; 0x21
 8006684:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2241      	movs	r2, #65	; 0x41
 800668a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2203      	movs	r2, #3
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fa6b 	bl	8007b6e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8006698:	e078      	b.n	800678c <DFU_Upload+0x1a8>
      }
      else if (hdfu->wblock_num > 1U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d934      	bls.n	800670e <DFU_Upload+0x12a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2209      	movs	r2, #9
 80066a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80066d6:	3b02      	subs	r3, #2
 80066d8:	029a      	lsls	r2, r3, #10
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80066e0:	4413      	add	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	6979      	ldr	r1, [r7, #20]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80066f6:	4798      	blx	r3
 80066f8:	6138      	str	r0, [r7, #16]

        /* Send the status data over EP0 */
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	6939      	ldr	r1, [r7, #16]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fa31 	bl	8007b6e <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800670c:	e03e      	b.n	800678c <DFU_Upload+0x1a8>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	220f      	movs	r2, #15
 8006712:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be nacked */
        USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 f9ac 	bl	8007a9a <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8006742:	e023      	b.n	800678c <DFU_Upload+0x1a8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      /* Call the error management function (command will be nacked */
      USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 f99f 	bl	8007a9a <USBD_CtlError>
    hdfu->dev_status[1] = 0U;
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U;
    hdfu->dev_status[4] = hdfu->dev_state;
  }
}
 800675c:	e016      	b.n	800678c <DFU_Upload+0x1a8>
    hdfu->dev_state = DFU_STATE_IDLE;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
}
 800678a:	e7ff      	b.n	800678c <DFU_Upload+0x1a8>
 800678c:	bf00      	nop
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a2:	60fb      	str	r3, [r7, #12]

  switch (hdfu->dev_state)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d002      	beq.n	80067b4 <DFU_GetStatus+0x20>
 80067ae:	2b06      	cmp	r3, #6
 80067b0:	d055      	beq.n	800685e <DFU_GetStatus+0xca>
        }
      }
      break;

    default :
      break;
 80067b2:	e092      	b.n	80068da <DFU_GetStatus+0x146>
      if (hdfu->wlength != 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d038      	beq.n	8006830 <DFU_GetStatus+0x9c>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2204      	movs	r2, #4
 80067c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d110      	bne.n	8006816 <DFU_GetStatus+0x82>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b41      	cmp	r3, #65	; 0x41
 80067fa:	d10c      	bne.n	8006816 <DFU_GetStatus+0x82>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8006810:	2100      	movs	r1, #0
 8006812:	4798      	blx	r3
      break;
 8006814:	e061      	b.n	80068da <DFU_GetStatus+0x146>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800682a:	2101      	movs	r1, #1
 800682c:	4798      	blx	r3
      break;
 800682e:	e054      	b.n	80068da <DFU_GetStatus+0x146>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2205      	movs	r2, #5
 8006834:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800685c:	e03d      	b.n	80068da <DFU_GetStatus+0x146>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8006864:	2b01      	cmp	r3, #1
 8006866:	d116      	bne.n	8006896 <DFU_GetStatus+0x102>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2207      	movs	r2, #7
 800686c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8006894:	e020      	b.n	80068d8 <DFU_GetStatus+0x144>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800689c:	2b00      	cmp	r3, #0
 800689e:	d11b      	bne.n	80068d8 <DFU_GetStatus+0x144>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 80068a0:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <DFU_GetStatus+0x160>)
 80068a2:	7d1b      	ldrb	r3, [r3, #20]
 80068a4:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d015      	beq.n	80068d8 <DFU_GetStatus+0x144>
          hdfu->dev_state = DFU_STATE_IDLE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80068d8:	bf00      	nop
  }

  /* Send the status data over EP0 */
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80068e0:	2206      	movs	r2, #6
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f942 	bl	8007b6e <USBD_CtlSendData>
}
 80068ea:	bf00      	nop
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000048 	.word	0x20000048

080068f8 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006906:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800690e:	2b0a      	cmp	r3, #10
 8006910:	d11e      	bne.n	8006950 <DFU_ClearStatus+0x58>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2202      	movs	r2, #2
 8006916:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->dev_status[2] = 0U;
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
    hdfu->dev_status[5] = 0U;/*iString*/
  }
}
 800694e:	e01d      	b.n	800698c <DFU_ClearStatus+0x94>
    hdfu->dev_state = DFU_STATE_ERROR;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	220a      	movs	r2, #10
 8006954:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	220e      	movs	r2, #14
 800695c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;/*bState*/
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;/*iString*/
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
}
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Return the current state of the DFU interface */
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80069ac:	2201      	movs	r2, #1
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f8dc 	bl	8007b6e <USBD_CtlSendData>
}
 80069b6:	bf00      	nop
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	60fb      	str	r3, [r7, #12]

  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d013      	beq.n	8006a00 <DFU_Abort+0x42>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d00e      	beq.n	8006a00 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_MANIFEST_SYNC
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80069e8:	2b05      	cmp	r3, #5
 80069ea:	d009      	beq.n	8006a00 <DFU_Abort+0x42>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80069f2:	2b06      	cmp	r3, #6
 80069f4:	d004      	beq.n	8006a00 <DFU_Abort+0x42>
      || hdfu->dev_state == DFU_STATE_UPLOAD_IDLE)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80069fc:	2b09      	cmp	r3, #9
 80069fe:	d125      	bne.n	8006a4c <DFU_Abort+0x8e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
	...

08006a58 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef   *hdfu;

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	60fb      	str	r3, [r7, #12]

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8006a70:	4b1f      	ldr	r3, [pc, #124]	; (8006af0 <DFU_Leave+0x98>)
 8006a72:	7d1b      	ldrb	r3, [r3, #20]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d016      	beq.n	8006aaa <DFU_Leave+0x52>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2206      	movs	r2, #6
 8006a80:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8006aa8:	e01f      	b.n	8006aea <DFU_Leave+0x92>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2208      	movs	r2, #8
 8006aae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f85c 	bl	8006b94 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	4798      	blx	r3

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8006ae6:	f7ff f9ab 	bl	8005e40 <__NVIC_SystemReset>

    /* The next instructions will not be reached (system reset) */
  }
}
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000048 	.word	0x20000048

08006af4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	4613      	mov	r3, r2
 8006b00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	e01a      	b.n	8006b42 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	79fa      	ldrb	r2, [r7, #7]
 8006b38:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f002 fce0 	bl	8009500 <USBD_LL_Init>

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d006      	beq.n	8006b6c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
 8006b6a:	e001      	b.n	8006b70 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bc80      	pop	{r7}
 8006b7a:	4770      	bx	lr

08006b7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f002 fcfb 	bl	8009580 <USBD_LL_Start>

  return USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6852      	ldr	r2, [r2, #4]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	4611      	mov	r1, r2
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 fd00 	bl	80095b6 <USBD_LL_Stop>

  return USBD_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	78fa      	ldrb	r2, [r7, #3]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3

  return USBD_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fee9 	bl	8007a22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d016      	beq.n	8006ca2 <USBD_LL_SetupStage+0x6a>
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d81c      	bhi.n	8006cb2 <USBD_LL_SetupStage+0x7a>
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <USBD_LL_SetupStage+0x4a>
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d008      	beq.n	8006c92 <USBD_LL_SetupStage+0x5a>
 8006c80:	e017      	b.n	8006cb2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9ca 	bl	8007024 <USBD_StdDevReq>
      break;
 8006c90:	e01a      	b.n	8006cc8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa2c 	bl	80070f8 <USBD_StdItfReq>
      break;
 8006ca0:	e012      	b.n	8006cc8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa6c 	bl	8007188 <USBD_StdEPReq>
      break;
 8006cb0:	e00a      	b.n	8006cc8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f002 fcb9 	bl	8009638 <USBD_LL_StallEP>
      break;
 8006cc6:	bf00      	nop
  }

  return USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	607a      	str	r2, [r7, #4]
 8006cde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006ce0:	7afb      	ldrb	r3, [r7, #11]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d14b      	bne.n	8006d7e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	d134      	bne.n	8006d62 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d919      	bls.n	8006d38 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	1ad2      	subs	r2, r2, r3
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d203      	bcs.n	8006d26 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	e002      	b.n	8006d2c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 ff68 	bl	8007c06 <USBD_CtlContinueRx>
 8006d36:	e038      	b.n	8006daa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d105      	bne.n	8006d5a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 ff65 	bl	8007c2a <USBD_CtlSendStatus>
 8006d60:	e023      	b.n	8006daa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	d11e      	bne.n	8006daa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d74:	2100      	movs	r1, #0
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f002 fc5e 	bl	8009638 <USBD_LL_StallEP>
 8006d7c:	e015      	b.n	8006daa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d108      	bne.n	8006da6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	7afa      	ldrb	r2, [r7, #11]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	4798      	blx	r3
 8006da4:	e001      	b.n	8006daa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	e000      	b.n	8006dac <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3718      	adds	r7, #24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dc2:	7afb      	ldrb	r3, [r7, #11]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d17f      	bne.n	8006ec8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3314      	adds	r3, #20
 8006dcc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d15c      	bne.n	8006e92 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d915      	bls.n	8006e10 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	1ad2      	subs	r2, r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 fed2 	bl	8007ba6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e02:	2300      	movs	r3, #0
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f002 fcc1 	bl	8009790 <USBD_LL_PrepareReceive>
 8006e0e:	e04e      	b.n	8006eae <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	6912      	ldr	r2, [r2, #16]
 8006e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e1c:	fb01 f202 	mul.w	r2, r1, r2
 8006e20:	1a9b      	subs	r3, r3, r2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d11c      	bne.n	8006e60 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d316      	bcc.n	8006e60 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d20f      	bcs.n	8006e60 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e40:	2200      	movs	r2, #0
 8006e42:	2100      	movs	r1, #0
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 feae 	bl	8007ba6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e52:	2300      	movs	r3, #0
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f002 fc99 	bl	8009790 <USBD_LL_PrepareReceive>
 8006e5e:	e026      	b.n	8006eae <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d105      	bne.n	8006e82 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e82:	2180      	movs	r1, #128	; 0x80
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f002 fbd7 	bl	8009638 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fee0 	bl	8007c50 <USBD_CtlReceiveStatus>
 8006e90:	e00d      	b.n	8006eae <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d004      	beq.n	8006ea6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006ea6:	2180      	movs	r1, #128	; 0x80
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f002 fbc5 	bl	8009638 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d11d      	bne.n	8006ef4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7ff fe81 	bl	8006bc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ec6:	e015      	b.n	8006ef4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00d      	beq.n	8006ef0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d108      	bne.n	8006ef0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	7afa      	ldrb	r2, [r7, #11]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	4798      	blx	r3
 8006eee:	e001      	b.n	8006ef4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e000      	b.n	8006ef6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b082      	sub	sp, #8
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f06:	2340      	movs	r3, #64	; 0x40
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f002 fb6d 	bl	80095ec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2240      	movs	r2, #64	; 0x40
 8006f1e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f22:	2340      	movs	r3, #64	; 0x40
 8006f24:	2200      	movs	r2, #0
 8006f26:	2180      	movs	r1, #128	; 0x80
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f002 fb5f 	bl	80095ec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2240      	movs	r2, #64	; 0x40
 8006f38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d009      	beq.n	8006f76 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6852      	ldr	r2, [r2, #4]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	4611      	mov	r1, r2
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
  }

  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr

08006f9e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d105      	bne.n	8006fe4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d10b      	bne.n	800701a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800703a:	2b40      	cmp	r3, #64	; 0x40
 800703c:	d005      	beq.n	800704a <USBD_StdDevReq+0x26>
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d84f      	bhi.n	80070e2 <USBD_StdDevReq+0xbe>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <USBD_StdDevReq+0x36>
 8007046:	2b20      	cmp	r3, #32
 8007048:	d14b      	bne.n	80070e2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
      break;
 8007058:	e048      	b.n	80070ec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b09      	cmp	r3, #9
 8007060:	d839      	bhi.n	80070d6 <USBD_StdDevReq+0xb2>
 8007062:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <USBD_StdDevReq+0x44>)
 8007064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080070cd 	.word	0x080070cd
 8007070:	080070d7 	.word	0x080070d7
 8007074:	080070c3 	.word	0x080070c3
 8007078:	080070d7 	.word	0x080070d7
 800707c:	0800709b 	.word	0x0800709b
 8007080:	08007091 	.word	0x08007091
 8007084:	080070d7 	.word	0x080070d7
 8007088:	080070af 	.word	0x080070af
 800708c:	080070a5 	.word	0x080070a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9dc 	bl	8007450 <USBD_GetDescriptor>
          break;
 8007098:	e022      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fb51 	bl	8007744 <USBD_SetAddress>
          break;
 80070a2:	e01d      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb90 	bl	80077cc <USBD_SetConfig>
          break;
 80070ac:	e018      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fc19 	bl	80078e8 <USBD_GetConfig>
          break;
 80070b6:	e013      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fc49 	bl	8007952 <USBD_GetStatus>
          break;
 80070c0:	e00e      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc77 	bl	80079b8 <USBD_SetFeature>
          break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc86 	bl	80079e0 <USBD_ClrFeature>
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fcde 	bl	8007a9a <USBD_CtlError>
          break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e004      	b.n	80070ec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fcd8 	bl	8007a9a <USBD_CtlError>
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710e:	2b40      	cmp	r3, #64	; 0x40
 8007110:	d005      	beq.n	800711e <USBD_StdItfReq+0x26>
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d82e      	bhi.n	8007174 <USBD_StdItfReq+0x7c>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <USBD_StdItfReq+0x26>
 800711a:	2b20      	cmp	r3, #32
 800711c:	d12a      	bne.n	8007174 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	3b01      	subs	r3, #1
 8007126:	2b02      	cmp	r3, #2
 8007128:	d81d      	bhi.n	8007166 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	889b      	ldrh	r3, [r3, #4]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b01      	cmp	r3, #1
 8007132:	d813      	bhi.n	800715c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d110      	bne.n	8007170 <USBD_StdItfReq+0x78>
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fd68 	bl	8007c2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800715a:	e009      	b.n	8007170 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fc9b 	bl	8007a9a <USBD_CtlError>
          break;
 8007164:	e004      	b.n	8007170 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fc96 	bl	8007a9a <USBD_CtlError>
          break;
 800716e:	e000      	b.n	8007172 <USBD_StdItfReq+0x7a>
          break;
 8007170:	bf00      	nop
      }
      break;
 8007172:	e004      	b.n	800717e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc8f 	bl	8007a9a <USBD_CtlError>
      break;
 800717c:	bf00      	nop
  }

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	889b      	ldrh	r3, [r3, #4]
 800719a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d007      	beq.n	80071b8 <USBD_StdEPReq+0x30>
 80071a8:	2b40      	cmp	r3, #64	; 0x40
 80071aa:	f200 8146 	bhi.w	800743a <USBD_StdEPReq+0x2b2>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <USBD_StdEPReq+0x40>
 80071b2:	2b20      	cmp	r3, #32
 80071b4:	f040 8141 	bne.w	800743a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
      break;
 80071c6:	e13d      	b.n	8007444 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d10a      	bne.n	80071ea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	e12d      	b.n	8007446 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d007      	beq.n	8007202 <USBD_StdEPReq+0x7a>
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	f300 811b 	bgt.w	800742e <USBD_StdEPReq+0x2a6>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d072      	beq.n	80072e2 <USBD_StdEPReq+0x15a>
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d03a      	beq.n	8007276 <USBD_StdEPReq+0xee>
 8007200:	e115      	b.n	800742e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007208:	2b02      	cmp	r3, #2
 800720a:	d002      	beq.n	8007212 <USBD_StdEPReq+0x8a>
 800720c:	2b03      	cmp	r3, #3
 800720e:	d015      	beq.n	800723c <USBD_StdEPReq+0xb4>
 8007210:	e02b      	b.n	800726a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00c      	beq.n	8007232 <USBD_StdEPReq+0xaa>
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d009      	beq.n	8007232 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f002 fa08 	bl	8009638 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007228:	2180      	movs	r1, #128	; 0x80
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f002 fa04 	bl	8009638 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007230:	e020      	b.n	8007274 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fc30 	bl	8007a9a <USBD_CtlError>
              break;
 800723a:	e01b      	b.n	8007274 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	885b      	ldrh	r3, [r3, #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10e      	bne.n	8007262 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <USBD_StdEPReq+0xda>
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d008      	beq.n	8007262 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	88db      	ldrh	r3, [r3, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f002 f9eb 	bl	8009638 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fce1 	bl	8007c2a <USBD_CtlSendStatus>

              break;
 8007268:	e004      	b.n	8007274 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc14 	bl	8007a9a <USBD_CtlError>
              break;
 8007272:	bf00      	nop
          }
          break;
 8007274:	e0e0      	b.n	8007438 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727c:	2b02      	cmp	r3, #2
 800727e:	d002      	beq.n	8007286 <USBD_StdEPReq+0xfe>
 8007280:	2b03      	cmp	r3, #3
 8007282:	d015      	beq.n	80072b0 <USBD_StdEPReq+0x128>
 8007284:	e026      	b.n	80072d4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <USBD_StdEPReq+0x11e>
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	2b80      	cmp	r3, #128	; 0x80
 8007290:	d009      	beq.n	80072a6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f002 f9ce 	bl	8009638 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800729c:	2180      	movs	r1, #128	; 0x80
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f002 f9ca 	bl	8009638 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a4:	e01c      	b.n	80072e0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fbf6 	bl	8007a9a <USBD_CtlError>
              break;
 80072ae:	e017      	b.n	80072e0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	885b      	ldrh	r3, [r3, #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d112      	bne.n	80072de <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f002 f9d5 	bl	8009676 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fcac 	bl	8007c2a <USBD_CtlSendStatus>
              }
              break;
 80072d2:	e004      	b.n	80072de <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fbdf 	bl	8007a9a <USBD_CtlError>
              break;
 80072dc:	e000      	b.n	80072e0 <USBD_StdEPReq+0x158>
              break;
 80072de:	bf00      	nop
          }
          break;
 80072e0:	e0aa      	b.n	8007438 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d002      	beq.n	80072f2 <USBD_StdEPReq+0x16a>
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d032      	beq.n	8007356 <USBD_StdEPReq+0x1ce>
 80072f0:	e097      	b.n	8007422 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f2:	7bbb      	ldrb	r3, [r7, #14]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d007      	beq.n	8007308 <USBD_StdEPReq+0x180>
 80072f8:	7bbb      	ldrb	r3, [r7, #14]
 80072fa:	2b80      	cmp	r3, #128	; 0x80
 80072fc:	d004      	beq.n	8007308 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbca 	bl	8007a9a <USBD_CtlError>
                break;
 8007306:	e091      	b.n	800742c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da0b      	bge.n	8007328 <USBD_StdEPReq+0x1a0>
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	3310      	adds	r3, #16
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	4413      	add	r3, r2
 8007324:	3304      	adds	r3, #4
 8007326:	e00b      	b.n	8007340 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4413      	add	r3, r2
 800733e:	3304      	adds	r3, #4
 8007340:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2202      	movs	r2, #2
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fc0d 	bl	8007b6e <USBD_CtlSendData>
              break;
 8007354:	e06a      	b.n	800742c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da11      	bge.n	8007382 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	3318      	adds	r3, #24
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d117      	bne.n	80073a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fb8d 	bl	8007a9a <USBD_CtlError>
                  break;
 8007380:	e054      	b.n	800742c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	f003 020f 	and.w	r2, r3, #15
 8007388:	6879      	ldr	r1, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fb7a 	bl	8007a9a <USBD_CtlError>
                  break;
 80073a6:	e041      	b.n	800742c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da0b      	bge.n	80073c8 <USBD_StdEPReq+0x240>
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	3310      	adds	r3, #16
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	3304      	adds	r3, #4
 80073c6:	e00b      	b.n	80073e0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4413      	add	r3, r2
 80073de:	3304      	adds	r3, #4
 80073e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <USBD_StdEPReq+0x266>
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	d103      	bne.n	80073f6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	e00e      	b.n	8007414 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	4619      	mov	r1, r3
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 f95a 	bl	80096b4 <USBD_LL_IsStallEP>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2201      	movs	r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e002      	b.n	8007414 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2202      	movs	r2, #2
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fba7 	bl	8007b6e <USBD_CtlSendData>
              break;
 8007420:	e004      	b.n	800742c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fb38 	bl	8007a9a <USBD_CtlError>
              break;
 800742a:	bf00      	nop
          }
          break;
 800742c:	e004      	b.n	8007438 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 fb32 	bl	8007a9a <USBD_CtlError>
          break;
 8007436:	bf00      	nop
      }
      break;
 8007438:	e004      	b.n	8007444 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fb2c 	bl	8007a9a <USBD_CtlError>
      break;
 8007442:	bf00      	nop
  }

  return ret;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	885b      	ldrh	r3, [r3, #2]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	2b06      	cmp	r3, #6
 8007472:	f200 813b 	bhi.w	80076ec <USBD_GetDescriptor+0x29c>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <USBD_GetDescriptor+0x2c>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	08007499 	.word	0x08007499
 8007480:	080074b1 	.word	0x080074b1
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080076ed 	.word	0x080076ed
 800748c:	080076ed 	.word	0x080076ed
 8007490:	0800768d 	.word	0x0800768d
 8007494:	080076b9 	.word	0x080076b9
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	7c12      	ldrb	r2, [r2, #16]
 80074a4:	f107 0108 	add.w	r1, r7, #8
 80074a8:	4610      	mov	r0, r2
 80074aa:	4798      	blx	r3
 80074ac:	60f8      	str	r0, [r7, #12]
      break;
 80074ae:	e125      	b.n	80076fc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7c1b      	ldrb	r3, [r3, #16]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10d      	bne.n	80074d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f107 0208 	add.w	r2, r7, #8
 80074c4:	4610      	mov	r0, r2
 80074c6:	4798      	blx	r3
 80074c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	2202      	movs	r2, #2
 80074d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074d2:	e113      	b.n	80076fc <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	f107 0208 	add.w	r2, r7, #8
 80074e0:	4610      	mov	r0, r2
 80074e2:	4798      	blx	r3
 80074e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	2202      	movs	r2, #2
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e105      	b.n	80076fc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	885b      	ldrh	r3, [r3, #2]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	f200 80ac 	bhi.w	8007654 <USBD_GetDescriptor+0x204>
 80074fc:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USBD_GetDescriptor+0xb4>)
 80074fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007502:	bf00      	nop
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007551 	.word	0x08007551
 800750c:	08007585 	.word	0x08007585
 8007510:	080075b9 	.word	0x080075b9
 8007514:	080075ed 	.word	0x080075ed
 8007518:	08007621 	.word	0x08007621
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753e:	e0a4      	b.n	800768a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 faa9 	bl	8007a9a <USBD_CtlError>
            err++;
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	3301      	adds	r3, #1
 800754c:	72fb      	strb	r3, [r7, #11]
          break;
 800754e:	e09c      	b.n	800768a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007572:	e08a      	b.n	800768a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa8f 	bl	8007a9a <USBD_CtlError>
            err++;
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	3301      	adds	r3, #1
 8007580:	72fb      	strb	r3, [r7, #11]
          break;
 8007582:	e082      	b.n	800768a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7c12      	ldrb	r2, [r2, #16]
 800759c:	f107 0108 	add.w	r1, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a6:	e070      	b.n	800768a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa75 	bl	8007a9a <USBD_CtlError>
            err++;
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	3301      	adds	r3, #1
 80075b4:	72fb      	strb	r3, [r7, #11]
          break;
 80075b6:	e068      	b.n	800768a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075da:	e056      	b.n	800768a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa5b 	bl	8007a9a <USBD_CtlError>
            err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ea:	e04e      	b.n	800768a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00b      	beq.n	8007610 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	f107 0108 	add.w	r1, r7, #8
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800760e:	e03c      	b.n	800768a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa41 	bl	8007a9a <USBD_CtlError>
            err++;
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	3301      	adds	r3, #1
 800761c:	72fb      	strb	r3, [r7, #11]
          break;
 800761e:	e034      	b.n	800768a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	7c12      	ldrb	r2, [r2, #16]
 8007638:	f107 0108 	add.w	r1, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007642:	e022      	b.n	800768a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa27 	bl	8007a9a <USBD_CtlError>
            err++;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	3301      	adds	r3, #1
 8007650:	72fb      	strb	r3, [r7, #11]
          break;
 8007652:	e01a      	b.n	800768a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	8852      	ldrh	r2, [r2, #2]
 800766c:	b2d1      	uxtb	r1, r2
 800766e:	f107 0208 	add.w	r2, r7, #8
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
 8007676:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007678:	e006      	b.n	8007688 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fa0c 	bl	8007a9a <USBD_CtlError>
            err++;
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	3301      	adds	r3, #1
 8007686:	72fb      	strb	r3, [r7, #11]
          break;
 8007688:	bf00      	nop
#else
          USBD_CtlError(pdev, req);
          err++;
#endif
      }
      break;
 800768a:	e037      	b.n	80076fc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7c1b      	ldrb	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769c:	f107 0208 	add.w	r2, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076a6:	e029      	b.n	80076fc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f9f5 	bl	8007a9a <USBD_CtlError>
        err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
      break;
 80076b6:	e021      	b.n	80076fc <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	7c1b      	ldrb	r3, [r3, #16]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10d      	bne.n	80076dc <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	f107 0208 	add.w	r2, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	2207      	movs	r2, #7
 80076d8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076da:	e00f      	b.n	80076fc <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9db 	bl	8007a9a <USBD_CtlError>
        err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
      break;
 80076ea:	e007      	b.n	80076fc <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f9d3 	bl	8007a9a <USBD_CtlError>
      err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
      break;
 80076fa:	bf00      	nop
  }

  if (err != 0U)
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d11c      	bne.n	800773c <USBD_GetDescriptor+0x2ec>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007702:	893b      	ldrh	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d011      	beq.n	800772c <USBD_GetDescriptor+0x2dc>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	88db      	ldrh	r3, [r3, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00d      	beq.n	800772c <USBD_GetDescriptor+0x2dc>
    {
      len = MIN(len, req->wLength);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	88da      	ldrh	r2, [r3, #6]
 8007714:	893b      	ldrh	r3, [r7, #8]
 8007716:	4293      	cmp	r3, r2
 8007718:	bf28      	it	cs
 800771a:	4613      	movcs	r3, r2
 800771c:	b29b      	uxth	r3, r3
 800771e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007720:	893b      	ldrh	r3, [r7, #8]
 8007722:	461a      	mov	r2, r3
 8007724:	68f9      	ldr	r1, [r7, #12]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa21 	bl	8007b6e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	88db      	ldrh	r3, [r3, #6]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <USBD_GetDescriptor+0x2ee>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa78 	bl	8007c2a <USBD_CtlSendStatus>
 800773a:	e000      	b.n	800773e <USBD_GetDescriptor+0x2ee>
    return;
 800773c:	bf00      	nop
    }
  }
}
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	889b      	ldrh	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d130      	bne.n	80077b8 <USBD_SetAddress+0x74>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d12c      	bne.n	80077b8 <USBD_SetAddress+0x74>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	885b      	ldrh	r3, [r3, #2]
 8007762:	2b7f      	cmp	r3, #127	; 0x7f
 8007764:	d828      	bhi.n	80077b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	885b      	ldrh	r3, [r3, #2]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007770:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007778:	2b03      	cmp	r3, #3
 800777a:	d104      	bne.n	8007786 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f98b 	bl	8007a9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007784:	e01d      	b.n	80077c2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	7bfa      	ldrb	r2, [r7, #15]
 800778a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 ffba 	bl	800970c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fa46 	bl	8007c2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	e009      	b.n	80077c2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b6:	e004      	b.n	80077c2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f96d 	bl	8007a9a <USBD_CtlError>
  }
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	885b      	ldrh	r3, [r3, #2]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	4b41      	ldr	r3, [pc, #260]	; (80078e4 <USBD_SetConfig+0x118>)
 80077de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077e0:	4b40      	ldr	r3, [pc, #256]	; (80078e4 <USBD_SetConfig+0x118>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d904      	bls.n	80077f2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f955 	bl	8007a9a <USBD_CtlError>
 80077f0:	e075      	b.n	80078de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d002      	beq.n	8007802 <USBD_SetConfig+0x36>
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d023      	beq.n	8007848 <USBD_SetConfig+0x7c>
 8007800:	e062      	b.n	80078c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007802:	4b38      	ldr	r3, [pc, #224]	; (80078e4 <USBD_SetConfig+0x118>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01a      	beq.n	8007840 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800780a:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <USBD_SetConfig+0x118>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2203      	movs	r2, #3
 8007818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800781c:	4b31      	ldr	r3, [pc, #196]	; (80078e4 <USBD_SetConfig+0x118>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7ff f9d6 	bl	8006bd4 <USBD_SetClassConfig>
 8007828:	4603      	mov	r3, r0
 800782a:	2b02      	cmp	r3, #2
 800782c:	d104      	bne.n	8007838 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f932 	bl	8007a9a <USBD_CtlError>
            return;
 8007836:	e052      	b.n	80078de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9f6 	bl	8007c2a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800783e:	e04e      	b.n	80078de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9f2 	bl	8007c2a <USBD_CtlSendStatus>
        break;
 8007846:	e04a      	b.n	80078de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007848:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <USBD_SetConfig+0x118>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d112      	bne.n	8007876 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007858:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <USBD_SetConfig+0x118>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007862:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <USBD_SetConfig+0x118>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff f9d2 	bl	8006c12 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9db 	bl	8007c2a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007874:	e033      	b.n	80078de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007876:	4b1b      	ldr	r3, [pc, #108]	; (80078e4 <USBD_SetConfig+0x118>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d01d      	beq.n	80078c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff f9c0 	bl	8006c12 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007892:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <USBD_SetConfig+0x118>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800789c:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <USBD_SetConfig+0x118>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff f996 	bl	8006bd4 <USBD_SetClassConfig>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d104      	bne.n	80078b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8f2 	bl	8007a9a <USBD_CtlError>
            return;
 80078b6:	e012      	b.n	80078de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f9b6 	bl	8007c2a <USBD_CtlSendStatus>
        break;
 80078be:	e00e      	b.n	80078de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f9b2 	bl	8007c2a <USBD_CtlSendStatus>
        break;
 80078c6:	e00a      	b.n	80078de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8e5 	bl	8007a9a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078d0:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <USBD_SetConfig+0x118>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff f99b 	bl	8006c12 <USBD_ClrClassConfig>
        break;
 80078dc:	bf00      	nop
    }
  }
}
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	200005df 	.word	0x200005df

080078e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	88db      	ldrh	r3, [r3, #6]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d004      	beq.n	8007904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f8cc 	bl	8007a9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007902:	e022      	b.n	800794a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800790a:	2b02      	cmp	r3, #2
 800790c:	dc02      	bgt.n	8007914 <USBD_GetConfig+0x2c>
 800790e:	2b00      	cmp	r3, #0
 8007910:	dc03      	bgt.n	800791a <USBD_GetConfig+0x32>
 8007912:	e015      	b.n	8007940 <USBD_GetConfig+0x58>
 8007914:	2b03      	cmp	r3, #3
 8007916:	d00b      	beq.n	8007930 <USBD_GetConfig+0x48>
 8007918:	e012      	b.n	8007940 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3308      	adds	r3, #8
 8007924:	2201      	movs	r2, #1
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f920 	bl	8007b6e <USBD_CtlSendData>
        break;
 800792e:	e00c      	b.n	800794a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3304      	adds	r3, #4
 8007934:	2201      	movs	r2, #1
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f918 	bl	8007b6e <USBD_CtlSendData>
        break;
 800793e:	e004      	b.n	800794a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f8a9 	bl	8007a9a <USBD_CtlError>
        break;
 8007948:	bf00      	nop
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007962:	3b01      	subs	r3, #1
 8007964:	2b02      	cmp	r3, #2
 8007966:	d81e      	bhi.n	80079a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d004      	beq.n	800797a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f891 	bl	8007a9a <USBD_CtlError>
        break;
 8007978:	e01a      	b.n	80079b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f043 0202 	orr.w	r2, r3, #2
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	330c      	adds	r3, #12
 800799a:	2202      	movs	r2, #2
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f8e5 	bl	8007b6e <USBD_CtlSendData>
      break;
 80079a4:	e004      	b.n	80079b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f876 	bl	8007a9a <USBD_CtlError>
      break;
 80079ae:	bf00      	nop
  }
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d106      	bne.n	80079d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f929 	bl	8007c2a <USBD_CtlSendStatus>
  }
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	3b01      	subs	r3, #1
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d80b      	bhi.n	8007a0e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	885b      	ldrh	r3, [r3, #2]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d10c      	bne.n	8007a18 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f90f 	bl	8007c2a <USBD_CtlSendStatus>
      }
      break;
 8007a0c:	e004      	b.n	8007a18 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f842 	bl	8007a9a <USBD_CtlError>
      break;
 8007a16:	e000      	b.n	8007a1a <USBD_ClrFeature+0x3a>
      break;
 8007a18:	bf00      	nop
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781a      	ldrb	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	785a      	ldrb	r2, [r3, #1]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	3302      	adds	r3, #2
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	3303      	adds	r3, #3
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	4413      	add	r3, r2
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	3305      	adds	r3, #5
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	3306      	adds	r3, #6
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	3307      	adds	r3, #7
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	80da      	strh	r2, [r3, #6]

}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr

08007a9a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007aa4:	2180      	movs	r1, #128	; 0x80
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 fdc6 	bl	8009638 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007aac:	2100      	movs	r1, #0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 fdc2 	bl	8009638 <USBD_LL_StallEP>
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d032      	beq.n	8007b38 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f834 	bl	8007b40 <USBD_GetLen>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	3301      	adds	r3, #1
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	75fa      	strb	r2, [r7, #23]
 8007aec:	461a      	mov	r2, r3
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4413      	add	r3, r2
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	7812      	ldrb	r2, [r2, #0]
 8007af6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	75fa      	strb	r2, [r7, #23]
 8007afe:	461a      	mov	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	4413      	add	r3, r2
 8007b04:	2203      	movs	r2, #3
 8007b06:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b08:	e012      	b.n	8007b30 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	60fa      	str	r2, [r7, #12]
 8007b10:	7dfa      	ldrb	r2, [r7, #23]
 8007b12:	1c51      	adds	r1, r2, #1
 8007b14:	75f9      	strb	r1, [r7, #23]
 8007b16:	4611      	mov	r1, r2
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	75fa      	strb	r2, [r7, #23]
 8007b26:	461a      	mov	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e8      	bne.n	8007b0a <USBD_GetString+0x4e>
    }
  }
}
 8007b38:	bf00      	nop
 8007b3a:	3718      	adds	r7, #24
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b4c:	e005      	b.n	8007b5a <USBD_GetLen+0x1a>
  {
    len++;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	3301      	adds	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3301      	adds	r3, #1
 8007b58:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1f5      	bne.n	8007b4e <USBD_GetLen+0xe>
  }

  return len;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b84:	88fa      	ldrh	r2, [r7, #6]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b90:	88fb      	ldrh	r3, [r7, #6]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	2100      	movs	r1, #0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f001 fdd7 	bl	800974a <USBD_LL_Transmit>

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	60f8      	str	r0, [r7, #12]
 8007bae:	60b9      	str	r1, [r7, #8]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f001 fdc5 	bl	800974a <USBD_LL_Transmit>

  return USBD_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	60f8      	str	r0, [r7, #12]
 8007bd2:	60b9      	str	r1, [r7, #8]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2203      	movs	r2, #3
 8007bdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007be0:	88fa      	ldrh	r2, [r7, #6]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007be8:	88fa      	ldrh	r2, [r7, #6]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007bf0:	88fb      	ldrh	r3, [r7, #6]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f001 fdca 	bl	8009790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	4613      	mov	r3, r2
 8007c12:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	2100      	movs	r1, #0
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f001 fdb8 	bl	8009790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2204      	movs	r2, #4
 8007c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2100      	movs	r1, #0
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fd82 	bl	800974a <USBD_LL_Transmit>

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2205      	movs	r2, #5
 8007c5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c60:	2300      	movs	r3, #0
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fd92 	bl	8009790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c88:	2b84      	cmp	r3, #132	; 0x84
 8007c8a:	d005      	beq.n	8007c98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	3303      	adds	r3, #3
 8007c96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c98:	68fb      	ldr	r3, [r7, #12]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007ca8:	f000 fae8 	bl	800827c <vTaskStartScheduler>
  
  return osOK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cb4:	b089      	sub	sp, #36	; 0x24
 8007cb6:	af04      	add	r7, sp, #16
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d020      	beq.n	8007d06 <osThreadCreate+0x54>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01c      	beq.n	8007d06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685c      	ldr	r4, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691e      	ldr	r6, [r3, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff ffc9 	bl	8007c76 <makeFreeRtosPriority>
 8007ce4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cee:	9202      	str	r2, [sp, #8]
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	9100      	str	r1, [sp, #0]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 f8e8 	bl	8007ed0 <xTaskCreateStatic>
 8007d00:	4603      	mov	r3, r0
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e01c      	b.n	8007d40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685c      	ldr	r4, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d12:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff ffab 	bl	8007c76 <makeFreeRtosPriority>
 8007d20:	4602      	mov	r2, r0
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	9200      	str	r2, [sp, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 f929 	bl	8007f88 <xTaskCreate>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e000      	b.n	8007d42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d40:	68fb      	ldr	r3, [r7, #12]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <osDelay+0x16>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	e000      	b.n	8007d62 <osDelay+0x18>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fa56 	bl	8008214 <vTaskDelay>
  
  return osOK;
 8007d68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f103 0208 	add.w	r2, r3, #8
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f103 0208 	add.w	r2, r3, #8
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f103 0208 	add.w	r2, r3, #8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	601a      	str	r2, [r3, #0]
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr

08007e0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b085      	sub	sp, #20
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d103      	bne.n	8007e2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e00c      	b.n	8007e48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3308      	adds	r3, #8
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e002      	b.n	8007e3c <vListInsert+0x2e>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d2f6      	bcs.n	8007e36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	601a      	str	r2, [r3, #0]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr

08007e7e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6892      	ldr	r2, [r2, #8]
 8007e94:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6852      	ldr	r2, [r2, #4]
 8007e9e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d103      	bne.n	8007eb2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	1e5a      	subs	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08e      	sub	sp, #56	; 0x38
 8007ed4:	af04      	add	r7, sp, #16
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d10a      	bne.n	8007efa <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ef6:	bf00      	nop
 8007ef8:	e7fe      	b.n	8007ef8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <xTaskCreateStatic+0x46>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	61fb      	str	r3, [r7, #28]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f16:	23a0      	movs	r3, #160	; 0xa0
 8007f18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2ba0      	cmp	r3, #160	; 0xa0
 8007f1e:	d00a      	beq.n	8007f36 <xTaskCreateStatic+0x66>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	61bb      	str	r3, [r7, #24]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01e      	beq.n	8007f7a <xTaskCreateStatic+0xaa>
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d01b      	beq.n	8007f7a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f54:	2300      	movs	r3, #0
 8007f56:	9303      	str	r3, [sp, #12]
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	9302      	str	r3, [sp, #8]
 8007f5c:	f107 0314 	add.w	r3, r7, #20
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f851 	bl	8008014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f74:	f000 f8e4 	bl	8008140 <prvAddNewTaskToReadyList>
 8007f78:	e001      	b.n	8007f7e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f7e:	697b      	ldr	r3, [r7, #20]
	}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3728      	adds	r7, #40	; 0x28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08c      	sub	sp, #48	; 0x30
 8007f8c:	af04      	add	r7, sp, #16
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	4613      	mov	r3, r2
 8007f96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fe97 	bl	8008cd0 <pvPortMalloc>
 8007fa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00e      	beq.n	8007fc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007faa:	20a0      	movs	r0, #160	; 0xa0
 8007fac:	f000 fe90 	bl	8008cd0 <pvPortMalloc>
 8007fb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8007fbe:	e005      	b.n	8007fcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fc0:	6978      	ldr	r0, [r7, #20]
 8007fc2:	f000 ff49 	bl	8008e58 <vPortFree>
 8007fc6:	e001      	b.n	8007fcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d017      	beq.n	8008002 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fda:	88fa      	ldrh	r2, [r7, #6]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	9302      	str	r3, [sp, #8]
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe6:	9301      	str	r3, [sp, #4]
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 f80f 	bl	8008014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ff6:	69f8      	ldr	r0, [r7, #28]
 8007ff8:	f000 f8a2 	bl	8008140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	e002      	b.n	8008008 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008008:	69bb      	ldr	r3, [r7, #24]
	}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800802c:	3b01      	subs	r3, #1
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f023 0307 	bic.w	r3, r3, #7
 800803a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	617b      	str	r3, [r7, #20]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800805c:	2300      	movs	r3, #0
 800805e:	61fb      	str	r3, [r7, #28]
 8008060:	e012      	b.n	8008088 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	4413      	add	r3, r2
 8008068:	7819      	ldrb	r1, [r3, #0]
 800806a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	4413      	add	r3, r2
 8008070:	3334      	adds	r3, #52	; 0x34
 8008072:	460a      	mov	r2, r1
 8008074:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d006      	beq.n	8008090 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	3301      	adds	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	2b0f      	cmp	r3, #15
 800808c:	d9e9      	bls.n	8008062 <prvInitialiseNewTask+0x4e>
 800808e:	e000      	b.n	8008092 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008090:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	2b06      	cmp	r3, #6
 800809e:	d901      	bls.n	80080a4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080a0:	2306      	movs	r3, #6
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b2:	2200      	movs	r2, #0
 80080b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	3304      	adds	r3, #4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff fe78 	bl	8007db0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	3318      	adds	r3, #24
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fe73 	bl	8007db0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f1c3 0207 	rsb	r2, r3, #7
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	334c      	adds	r3, #76	; 0x4c
 80080f4:	224c      	movs	r2, #76	; 0x4c
 80080f6:	2100      	movs	r1, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 fbb9 	bl	8009870 <memset>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	4a0c      	ldr	r2, [pc, #48]	; (8008134 <prvInitialiseNewTask+0x120>)
 8008102:	651a      	str	r2, [r3, #80]	; 0x50
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	4a0c      	ldr	r2, [pc, #48]	; (8008138 <prvInitialiseNewTask+0x124>)
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
 800810a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810c:	4a0b      	ldr	r2, [pc, #44]	; (800813c <prvInitialiseNewTask+0x128>)
 800810e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	69b8      	ldr	r0, [r7, #24]
 8008116:	f000 fc29 	bl	800896c <pxPortInitialiseStack>
 800811a:	4602      	mov	r2, r0
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800812c:	bf00      	nop
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20001f00 	.word	0x20001f00
 8008138:	20001f68 	.word	0x20001f68
 800813c:	20001fd0 	.word	0x20001fd0

08008140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008148:	f000 fd00 	bl	8008b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800814c:	4b2a      	ldr	r3, [pc, #168]	; (80081f8 <prvAddNewTaskToReadyList+0xb8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3301      	adds	r3, #1
 8008152:	4a29      	ldr	r2, [pc, #164]	; (80081f8 <prvAddNewTaskToReadyList+0xb8>)
 8008154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008156:	4b29      	ldr	r3, [pc, #164]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800815e:	4a27      	ldr	r2, [pc, #156]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008164:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <prvAddNewTaskToReadyList+0xb8>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d110      	bne.n	800818e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800816c:	f000 fad2 	bl	8008714 <prvInitialiseTaskLists>
 8008170:	e00d      	b.n	800818e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008172:	4b23      	ldr	r3, [pc, #140]	; (8008200 <prvAddNewTaskToReadyList+0xc0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800817a:	4b20      	ldr	r3, [pc, #128]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	429a      	cmp	r2, r3
 8008186:	d802      	bhi.n	800818e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008188:	4a1c      	ldr	r2, [pc, #112]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800818e:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <prvAddNewTaskToReadyList+0xc4>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3301      	adds	r3, #1
 8008194:	4a1b      	ldr	r2, [pc, #108]	; (8008204 <prvAddNewTaskToReadyList+0xc4>)
 8008196:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	2201      	movs	r2, #1
 800819e:	409a      	lsls	r2, r3
 80081a0:	4b19      	ldr	r3, [pc, #100]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	4a18      	ldr	r2, [pc, #96]	; (8008208 <prvAddNewTaskToReadyList+0xc8>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	4613      	mov	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4a15      	ldr	r2, [pc, #84]	; (800820c <prvAddNewTaskToReadyList+0xcc>)
 80081b8:	441a      	add	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	4619      	mov	r1, r3
 80081c0:	4610      	mov	r0, r2
 80081c2:	f7ff fe01 	bl	8007dc8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081c6:	f000 fcf1 	bl	8008bac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <prvAddNewTaskToReadyList+0xc0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvAddNewTaskToReadyList+0xbc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	429a      	cmp	r2, r3
 80081de:	d207      	bcs.n	80081f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <prvAddNewTaskToReadyList+0xd0>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200006e0 	.word	0x200006e0
 80081fc:	200005e0 	.word	0x200005e0
 8008200:	200006ec 	.word	0x200006ec
 8008204:	200006fc 	.word	0x200006fc
 8008208:	200006e8 	.word	0x200006e8
 800820c:	200005e4 	.word	0x200005e4
 8008210:	e000ed04 	.word	0xe000ed04

08008214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d017      	beq.n	8008256 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008226:	4b13      	ldr	r3, [pc, #76]	; (8008274 <vTaskDelay+0x60>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00a      	beq.n	8008244 <vTaskDelay+0x30>
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	60bb      	str	r3, [r7, #8]
}
 8008240:	bf00      	nop
 8008242:	e7fe      	b.n	8008242 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008244:	f000 f884 	bl	8008350 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008248:	2100      	movs	r1, #0
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fb28 	bl	80088a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008250:	f000 f88c 	bl	800836c <xTaskResumeAll>
 8008254:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d107      	bne.n	800826c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800825c:	4b06      	ldr	r3, [pc, #24]	; (8008278 <vTaskDelay+0x64>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800826c:	bf00      	nop
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20000708 	.word	0x20000708
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	; 0x28
 8008280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008286:	2300      	movs	r3, #0
 8008288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800828a:	463a      	mov	r2, r7
 800828c:	1d39      	adds	r1, r7, #4
 800828e:	f107 0308 	add.w	r3, r7, #8
 8008292:	4618      	mov	r0, r3
 8008294:	f7f7 ff5c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	9202      	str	r2, [sp, #8]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	460a      	mov	r2, r1
 80082aa:	4921      	ldr	r1, [pc, #132]	; (8008330 <vTaskStartScheduler+0xb4>)
 80082ac:	4821      	ldr	r0, [pc, #132]	; (8008334 <vTaskStartScheduler+0xb8>)
 80082ae:	f7ff fe0f 	bl	8007ed0 <xTaskCreateStatic>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4a20      	ldr	r2, [pc, #128]	; (8008338 <vTaskStartScheduler+0xbc>)
 80082b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80082b8:	4b1f      	ldr	r3, [pc, #124]	; (8008338 <vTaskStartScheduler+0xbc>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082c0:	2301      	movs	r3, #1
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e001      	b.n	80082ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d11b      	bne.n	8008308 <vTaskStartScheduler+0x8c>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	613b      	str	r3, [r7, #16]
}
 80082e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082e4:	4b15      	ldr	r3, [pc, #84]	; (800833c <vTaskStartScheduler+0xc0>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	334c      	adds	r3, #76	; 0x4c
 80082ea:	4a15      	ldr	r2, [pc, #84]	; (8008340 <vTaskStartScheduler+0xc4>)
 80082ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082ee:	4b15      	ldr	r3, [pc, #84]	; (8008344 <vTaskStartScheduler+0xc8>)
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082f6:	4b14      	ldr	r3, [pc, #80]	; (8008348 <vTaskStartScheduler+0xcc>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80082fc:	4b13      	ldr	r3, [pc, #76]	; (800834c <vTaskStartScheduler+0xd0>)
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008302:	f000 fbb1 	bl	8008a68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008306:	e00e      	b.n	8008326 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d10a      	bne.n	8008326 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	60fb      	str	r3, [r7, #12]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <vTaskStartScheduler+0xa8>
}
 8008326:	bf00      	nop
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	08009ab4 	.word	0x08009ab4
 8008334:	080086e5 	.word	0x080086e5
 8008338:	20000704 	.word	0x20000704
 800833c:	200005e0 	.word	0x200005e0
 8008340:	2000012c 	.word	0x2000012c
 8008344:	20000700 	.word	0x20000700
 8008348:	200006ec 	.word	0x200006ec
 800834c:	200006e4 	.word	0x200006e4

08008350 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <vTaskSuspendAll+0x18>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3301      	adds	r3, #1
 800835a:	4a03      	ldr	r2, [pc, #12]	; (8008368 <vTaskSuspendAll+0x18>)
 800835c:	6013      	str	r3, [r2, #0]
}
 800835e:	bf00      	nop
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20000708 	.word	0x20000708

0800836c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008376:	2300      	movs	r3, #0
 8008378:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800837a:	4b41      	ldr	r3, [pc, #260]	; (8008480 <xTaskResumeAll+0x114>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10a      	bne.n	8008398 <xTaskResumeAll+0x2c>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	603b      	str	r3, [r7, #0]
}
 8008394:	bf00      	nop
 8008396:	e7fe      	b.n	8008396 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008398:	f000 fbd8 	bl	8008b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800839c:	4b38      	ldr	r3, [pc, #224]	; (8008480 <xTaskResumeAll+0x114>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	4a37      	ldr	r2, [pc, #220]	; (8008480 <xTaskResumeAll+0x114>)
 80083a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a6:	4b36      	ldr	r3, [pc, #216]	; (8008480 <xTaskResumeAll+0x114>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d161      	bne.n	8008472 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083ae:	4b35      	ldr	r3, [pc, #212]	; (8008484 <xTaskResumeAll+0x118>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d05d      	beq.n	8008472 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083b6:	e02e      	b.n	8008416 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80083b8:	4b33      	ldr	r3, [pc, #204]	; (8008488 <xTaskResumeAll+0x11c>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3318      	adds	r3, #24
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7ff fd5a 	bl	8007e7e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3304      	adds	r3, #4
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fd55 	bl	8007e7e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	2201      	movs	r2, #1
 80083da:	409a      	lsls	r2, r3
 80083dc:	4b2b      	ldr	r3, [pc, #172]	; (800848c <xTaskResumeAll+0x120>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	4a2a      	ldr	r2, [pc, #168]	; (800848c <xTaskResumeAll+0x120>)
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4a27      	ldr	r2, [pc, #156]	; (8008490 <xTaskResumeAll+0x124>)
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3304      	adds	r3, #4
 80083fa:	4619      	mov	r1, r3
 80083fc:	4610      	mov	r0, r2
 80083fe:	f7ff fce3 	bl	8007dc8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008406:	4b23      	ldr	r3, [pc, #140]	; (8008494 <xTaskResumeAll+0x128>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	429a      	cmp	r2, r3
 800840e:	d302      	bcc.n	8008416 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008410:	4b21      	ldr	r3, [pc, #132]	; (8008498 <xTaskResumeAll+0x12c>)
 8008412:	2201      	movs	r2, #1
 8008414:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008416:	4b1c      	ldr	r3, [pc, #112]	; (8008488 <xTaskResumeAll+0x11c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1cc      	bne.n	80083b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d001      	beq.n	8008428 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008424:	f000 fa18 	bl	8008858 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008428:	4b1c      	ldr	r3, [pc, #112]	; (800849c <xTaskResumeAll+0x130>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d010      	beq.n	8008456 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008434:	f000 f836 	bl	80084a4 <xTaskIncrementTick>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800843e:	4b16      	ldr	r3, [pc, #88]	; (8008498 <xTaskResumeAll+0x12c>)
 8008440:	2201      	movs	r2, #1
 8008442:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3b01      	subs	r3, #1
 8008448:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f1      	bne.n	8008434 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008450:	4b12      	ldr	r3, [pc, #72]	; (800849c <xTaskResumeAll+0x130>)
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008456:	4b10      	ldr	r3, [pc, #64]	; (8008498 <xTaskResumeAll+0x12c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800845e:	2301      	movs	r3, #1
 8008460:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008462:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <xTaskResumeAll+0x134>)
 8008464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008472:	f000 fb9b 	bl	8008bac <vPortExitCritical>

	return xAlreadyYielded;
 8008476:	68bb      	ldr	r3, [r7, #8]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20000708 	.word	0x20000708
 8008484:	200006e0 	.word	0x200006e0
 8008488:	200006a0 	.word	0x200006a0
 800848c:	200006e8 	.word	0x200006e8
 8008490:	200005e4 	.word	0x200005e4
 8008494:	200005e0 	.word	0x200005e0
 8008498:	200006f4 	.word	0x200006f4
 800849c:	200006f0 	.word	0x200006f0
 80084a0:	e000ed04 	.word	0xe000ed04

080084a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ae:	4b51      	ldr	r3, [pc, #324]	; (80085f4 <xTaskIncrementTick+0x150>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 808d 	bne.w	80085d2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084b8:	4b4f      	ldr	r3, [pc, #316]	; (80085f8 <xTaskIncrementTick+0x154>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3301      	adds	r3, #1
 80084be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084c0:	4a4d      	ldr	r2, [pc, #308]	; (80085f8 <xTaskIncrementTick+0x154>)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d120      	bne.n	800850e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80084cc:	4b4b      	ldr	r3, [pc, #300]	; (80085fc <xTaskIncrementTick+0x158>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <xTaskIncrementTick+0x48>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	603b      	str	r3, [r7, #0]
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <xTaskIncrementTick+0x46>
 80084ec:	4b43      	ldr	r3, [pc, #268]	; (80085fc <xTaskIncrementTick+0x158>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60fb      	str	r3, [r7, #12]
 80084f2:	4b43      	ldr	r3, [pc, #268]	; (8008600 <xTaskIncrementTick+0x15c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a41      	ldr	r2, [pc, #260]	; (80085fc <xTaskIncrementTick+0x158>)
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	4a41      	ldr	r2, [pc, #260]	; (8008600 <xTaskIncrementTick+0x15c>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	4b40      	ldr	r3, [pc, #256]	; (8008604 <xTaskIncrementTick+0x160>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	4a3f      	ldr	r2, [pc, #252]	; (8008604 <xTaskIncrementTick+0x160>)
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	f000 f9a5 	bl	8008858 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800850e:	4b3e      	ldr	r3, [pc, #248]	; (8008608 <xTaskIncrementTick+0x164>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	429a      	cmp	r2, r3
 8008516:	d34d      	bcc.n	80085b4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008518:	4b38      	ldr	r3, [pc, #224]	; (80085fc <xTaskIncrementTick+0x158>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <xTaskIncrementTick+0x82>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <xTaskIncrementTick+0x84>
 8008526:	2300      	movs	r3, #0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d004      	beq.n	8008536 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800852c:	4b36      	ldr	r3, [pc, #216]	; (8008608 <xTaskIncrementTick+0x164>)
 800852e:	f04f 32ff 	mov.w	r2, #4294967295
 8008532:	601a      	str	r2, [r3, #0]
					break;
 8008534:	e03e      	b.n	80085b4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008536:	4b31      	ldr	r3, [pc, #196]	; (80085fc <xTaskIncrementTick+0x158>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	429a      	cmp	r2, r3
 800854c:	d203      	bcs.n	8008556 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800854e:	4a2e      	ldr	r2, [pc, #184]	; (8008608 <xTaskIncrementTick+0x164>)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6013      	str	r3, [r2, #0]
						break;
 8008554:	e02e      	b.n	80085b4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fc8f 	bl	8007e7e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	2b00      	cmp	r3, #0
 8008566:	d004      	beq.n	8008572 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	3318      	adds	r3, #24
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fc86 	bl	8007e7e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008576:	2201      	movs	r2, #1
 8008578:	409a      	lsls	r2, r3
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <xTaskIncrementTick+0x168>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4313      	orrs	r3, r2
 8008580:	4a22      	ldr	r2, [pc, #136]	; (800860c <xTaskIncrementTick+0x168>)
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <xTaskIncrementTick+0x16c>)
 8008592:	441a      	add	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	3304      	adds	r3, #4
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7ff fc14 	bl	8007dc8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <xTaskIncrementTick+0x170>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d3b4      	bcc.n	8008518 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b2:	e7b1      	b.n	8008518 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085b4:	4b17      	ldr	r3, [pc, #92]	; (8008614 <xTaskIncrementTick+0x170>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ba:	4915      	ldr	r1, [pc, #84]	; (8008610 <xTaskIncrementTick+0x16c>)
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d907      	bls.n	80085dc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80085cc:	2301      	movs	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e004      	b.n	80085dc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80085d2:	4b11      	ldr	r3, [pc, #68]	; (8008618 <xTaskIncrementTick+0x174>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3301      	adds	r3, #1
 80085d8:	4a0f      	ldr	r2, [pc, #60]	; (8008618 <xTaskIncrementTick+0x174>)
 80085da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80085dc:	4b0f      	ldr	r3, [pc, #60]	; (800861c <xTaskIncrementTick+0x178>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80085e8:	697b      	ldr	r3, [r7, #20]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000708 	.word	0x20000708
 80085f8:	200006e4 	.word	0x200006e4
 80085fc:	20000698 	.word	0x20000698
 8008600:	2000069c 	.word	0x2000069c
 8008604:	200006f8 	.word	0x200006f8
 8008608:	20000700 	.word	0x20000700
 800860c:	200006e8 	.word	0x200006e8
 8008610:	200005e4 	.word	0x200005e4
 8008614:	200005e0 	.word	0x200005e0
 8008618:	200006f0 	.word	0x200006f0
 800861c:	200006f4 	.word	0x200006f4

08008620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008626:	4b29      	ldr	r3, [pc, #164]	; (80086cc <vTaskSwitchContext+0xac>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800862e:	4b28      	ldr	r3, [pc, #160]	; (80086d0 <vTaskSwitchContext+0xb0>)
 8008630:	2201      	movs	r2, #1
 8008632:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008634:	e044      	b.n	80086c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008636:	4b26      	ldr	r3, [pc, #152]	; (80086d0 <vTaskSwitchContext+0xb0>)
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800863c:	4b25      	ldr	r3, [pc, #148]	; (80086d4 <vTaskSwitchContext+0xb4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	fab3 f383 	clz	r3, r3
 8008648:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800864a:	7afb      	ldrb	r3, [r7, #11]
 800864c:	f1c3 031f 	rsb	r3, r3, #31
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	4921      	ldr	r1, [pc, #132]	; (80086d8 <vTaskSwitchContext+0xb8>)
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	440b      	add	r3, r1
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	607b      	str	r3, [r7, #4]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <vTaskSwitchContext+0x5a>
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4a14      	ldr	r2, [pc, #80]	; (80086d8 <vTaskSwitchContext+0xb8>)
 8008688:	4413      	add	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3308      	adds	r3, #8
 800869e:	429a      	cmp	r2, r3
 80086a0:	d104      	bne.n	80086ac <vTaskSwitchContext+0x8c>
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	605a      	str	r2, [r3, #4]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <vTaskSwitchContext+0xbc>)
 80086b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086b6:	4b09      	ldr	r3, [pc, #36]	; (80086dc <vTaskSwitchContext+0xbc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	334c      	adds	r3, #76	; 0x4c
 80086bc:	4a08      	ldr	r2, [pc, #32]	; (80086e0 <vTaskSwitchContext+0xc0>)
 80086be:	6013      	str	r3, [r2, #0]
}
 80086c0:	bf00      	nop
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	20000708 	.word	0x20000708
 80086d0:	200006f4 	.word	0x200006f4
 80086d4:	200006e8 	.word	0x200006e8
 80086d8:	200005e4 	.word	0x200005e4
 80086dc:	200005e0 	.word	0x200005e0
 80086e0:	2000012c 	.word	0x2000012c

080086e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086ec:	f000 f852 	bl	8008794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <prvIdleTask+0x28>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d9f9      	bls.n	80086ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80086f8:	4b05      	ldr	r3, [pc, #20]	; (8008710 <prvIdleTask+0x2c>)
 80086fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008708:	e7f0      	b.n	80086ec <prvIdleTask+0x8>
 800870a:	bf00      	nop
 800870c:	200005e4 	.word	0x200005e4
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800871a:	2300      	movs	r3, #0
 800871c:	607b      	str	r3, [r7, #4]
 800871e:	e00c      	b.n	800873a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4a12      	ldr	r2, [pc, #72]	; (8008774 <prvInitialiseTaskLists+0x60>)
 800872c:	4413      	add	r3, r2
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff fb1f 	bl	8007d72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3301      	adds	r3, #1
 8008738:	607b      	str	r3, [r7, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b06      	cmp	r3, #6
 800873e:	d9ef      	bls.n	8008720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008740:	480d      	ldr	r0, [pc, #52]	; (8008778 <prvInitialiseTaskLists+0x64>)
 8008742:	f7ff fb16 	bl	8007d72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008746:	480d      	ldr	r0, [pc, #52]	; (800877c <prvInitialiseTaskLists+0x68>)
 8008748:	f7ff fb13 	bl	8007d72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800874c:	480c      	ldr	r0, [pc, #48]	; (8008780 <prvInitialiseTaskLists+0x6c>)
 800874e:	f7ff fb10 	bl	8007d72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008752:	480c      	ldr	r0, [pc, #48]	; (8008784 <prvInitialiseTaskLists+0x70>)
 8008754:	f7ff fb0d 	bl	8007d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008758:	480b      	ldr	r0, [pc, #44]	; (8008788 <prvInitialiseTaskLists+0x74>)
 800875a:	f7ff fb0a 	bl	8007d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <prvInitialiseTaskLists+0x78>)
 8008760:	4a05      	ldr	r2, [pc, #20]	; (8008778 <prvInitialiseTaskLists+0x64>)
 8008762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <prvInitialiseTaskLists+0x7c>)
 8008766:	4a05      	ldr	r2, [pc, #20]	; (800877c <prvInitialiseTaskLists+0x68>)
 8008768:	601a      	str	r2, [r3, #0]
}
 800876a:	bf00      	nop
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	200005e4 	.word	0x200005e4
 8008778:	20000670 	.word	0x20000670
 800877c:	20000684 	.word	0x20000684
 8008780:	200006a0 	.word	0x200006a0
 8008784:	200006b4 	.word	0x200006b4
 8008788:	200006cc 	.word	0x200006cc
 800878c:	20000698 	.word	0x20000698
 8008790:	2000069c 	.word	0x2000069c

08008794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800879a:	e019      	b.n	80087d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800879c:	f000 f9d6 	bl	8008b4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80087a0:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <prvCheckTasksWaitingTermination+0x50>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fb66 	bl	8007e7e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087b2:	4b0d      	ldr	r3, [pc, #52]	; (80087e8 <prvCheckTasksWaitingTermination+0x54>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	4a0b      	ldr	r2, [pc, #44]	; (80087e8 <prvCheckTasksWaitingTermination+0x54>)
 80087ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087bc:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <prvCheckTasksWaitingTermination+0x58>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3b01      	subs	r3, #1
 80087c2:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <prvCheckTasksWaitingTermination+0x58>)
 80087c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087c6:	f000 f9f1 	bl	8008bac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f810 	bl	80087f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <prvCheckTasksWaitingTermination+0x58>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e1      	bne.n	800879c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	200006b4 	.word	0x200006b4
 80087e8:	200006e0 	.word	0x200006e0
 80087ec:	200006c8 	.word	0x200006c8

080087f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	334c      	adds	r3, #76	; 0x4c
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 f83f 	bl	8009880 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008808:	2b00      	cmp	r3, #0
 800880a:	d108      	bne.n	800881e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fb21 	bl	8008e58 <vPortFree>
				vPortFree( pxTCB );
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fb1e 	bl	8008e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800881c:	e018      	b.n	8008850 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008824:	2b01      	cmp	r3, #1
 8008826:	d103      	bne.n	8008830 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fb15 	bl	8008e58 <vPortFree>
	}
 800882e:	e00f      	b.n	8008850 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008836:	2b02      	cmp	r3, #2
 8008838:	d00a      	beq.n	8008850 <prvDeleteTCB+0x60>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	60fb      	str	r3, [r7, #12]
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <prvDeleteTCB+0x5e>
	}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800885e:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <prvResetNextTaskUnblockTime+0x40>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <prvResetNextTaskUnblockTime+0x14>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <prvResetNextTaskUnblockTime+0x16>
 800886c:	2300      	movs	r3, #0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d004      	beq.n	800887c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <prvResetNextTaskUnblockTime+0x44>)
 8008874:	f04f 32ff 	mov.w	r2, #4294967295
 8008878:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800887a:	e008      	b.n	800888e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <prvResetNextTaskUnblockTime+0x40>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	4a04      	ldr	r2, [pc, #16]	; (800889c <prvResetNextTaskUnblockTime+0x44>)
 800888c:	6013      	str	r3, [r2, #0]
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr
 8008898:	20000698 	.word	0x20000698
 800889c:	20000700 	.word	0x20000700

080088a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088aa:	4b29      	ldr	r3, [pc, #164]	; (8008950 <prvAddCurrentTaskToDelayedList+0xb0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088b0:	4b28      	ldr	r3, [pc, #160]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3304      	adds	r3, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff fae1 	bl	8007e7e <uxListRemove>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10b      	bne.n	80088da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80088c2:	4b24      	ldr	r3, [pc, #144]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	2201      	movs	r2, #1
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	43da      	mvns	r2, r3
 80088d0:	4b21      	ldr	r3, [pc, #132]	; (8008958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4013      	ands	r3, r2
 80088d6:	4a20      	ldr	r2, [pc, #128]	; (8008958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e0:	d10a      	bne.n	80088f8 <prvAddCurrentTaskToDelayedList+0x58>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d007      	beq.n	80088f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e8:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4619      	mov	r1, r3
 80088f0:	481a      	ldr	r0, [pc, #104]	; (800895c <prvAddCurrentTaskToDelayedList+0xbc>)
 80088f2:	f7ff fa69 	bl	8007dc8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088f6:	e026      	b.n	8008946 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4413      	add	r3, r2
 80088fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008900:	4b14      	ldr	r3, [pc, #80]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	429a      	cmp	r2, r3
 800890e:	d209      	bcs.n	8008924 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008910:	4b13      	ldr	r3, [pc, #76]	; (8008960 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3304      	adds	r3, #4
 800891a:	4619      	mov	r1, r3
 800891c:	4610      	mov	r0, r2
 800891e:	f7ff fa76 	bl	8007e0e <vListInsert>
}
 8008922:	e010      	b.n	8008946 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008924:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <prvAddCurrentTaskToDelayedList+0xb4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3304      	adds	r3, #4
 800892e:	4619      	mov	r1, r3
 8008930:	4610      	mov	r0, r2
 8008932:	f7ff fa6c 	bl	8007e0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	d202      	bcs.n	8008946 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008940:	4a09      	ldr	r2, [pc, #36]	; (8008968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6013      	str	r3, [r2, #0]
}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200006e4 	.word	0x200006e4
 8008954:	200005e0 	.word	0x200005e0
 8008958:	200006e8 	.word	0x200006e8
 800895c:	200006cc 	.word	0x200006cc
 8008960:	2000069c 	.word	0x2000069c
 8008964:	20000698 	.word	0x20000698
 8008968:	20000700 	.word	0x20000700

0800896c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b04      	subs	r3, #4
 800897c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b04      	subs	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800899c:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <pxPortInitialiseStack+0x54>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3b14      	subs	r3, #20
 80089a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3b20      	subs	r3, #32
 80089b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089b4:	68fb      	ldr	r3, [r7, #12]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr
 80089c0:	080089c5 	.word	0x080089c5

080089c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <prvTaskExitError+0x54>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d00a      	beq.n	80089ee <prvTaskExitError+0x2a>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	60fb      	str	r3, [r7, #12]
}
 80089ea:	bf00      	nop
 80089ec:	e7fe      	b.n	80089ec <prvTaskExitError+0x28>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60bb      	str	r3, [r7, #8]
}
 8008a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a02:	bf00      	nop
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0fc      	beq.n	8008a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bc80      	pop	{r7}
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	20000070 	.word	0x20000070
 8008a1c:	00000000 	.word	0x00000000

08008a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <pxCurrentTCBConst2>)
 8008a22:	6819      	ldr	r1, [r3, #0]
 8008a24:	6808      	ldr	r0, [r1, #0]
 8008a26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a2a:	f380 8809 	msr	PSP, r0
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8811 	msr	BASEPRI, r0
 8008a3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a3e:	4770      	bx	lr

08008a40 <pxCurrentTCBConst2>:
 8008a40:	200005e0 	.word	0x200005e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a44:	bf00      	nop
 8008a46:	bf00      	nop

08008a48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a48:	4806      	ldr	r0, [pc, #24]	; (8008a64 <prvPortStartFirstTask+0x1c>)
 8008a4a:	6800      	ldr	r0, [r0, #0]
 8008a4c:	6800      	ldr	r0, [r0, #0]
 8008a4e:	f380 8808 	msr	MSP, r0
 8008a52:	b662      	cpsie	i
 8008a54:	b661      	cpsie	f
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	df00      	svc	0
 8008a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a62:	bf00      	nop
 8008a64:	e000ed08 	.word	0xe000ed08

08008a68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a6e:	4b32      	ldr	r3, [pc, #200]	; (8008b38 <xPortStartScheduler+0xd0>)
 8008a70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	22ff      	movs	r2, #255	; 0xff
 8008a7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	4b2a      	ldr	r3, [pc, #168]	; (8008b3c <xPortStartScheduler+0xd4>)
 8008a94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a96:	4b2a      	ldr	r3, [pc, #168]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008a98:	2207      	movs	r2, #7
 8008a9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a9c:	e009      	b.n	8008ab2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a9e:	4b28      	ldr	r3, [pc, #160]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	4a26      	ldr	r2, [pc, #152]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008aa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aba:	2b80      	cmp	r3, #128	; 0x80
 8008abc:	d0ef      	beq.n	8008a9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008abe:	4b20      	ldr	r3, [pc, #128]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f1c3 0307 	rsb	r3, r3, #7
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d00a      	beq.n	8008ae0 <xPortStartScheduler+0x78>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	60bb      	str	r3, [r7, #8]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ae0:	4b17      	ldr	r3, [pc, #92]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	021b      	lsls	r3, r3, #8
 8008ae6:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008ae8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aea:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008af2:	4a13      	ldr	r2, [pc, #76]	; (8008b40 <xPortStartScheduler+0xd8>)
 8008af4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008afe:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <xPortStartScheduler+0xdc>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a10      	ldr	r2, [pc, #64]	; (8008b44 <xPortStartScheduler+0xdc>)
 8008b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <xPortStartScheduler+0xdc>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a0d      	ldr	r2, [pc, #52]	; (8008b44 <xPortStartScheduler+0xdc>)
 8008b10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b16:	f000 f8b9 	bl	8008c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b1a:	4b0b      	ldr	r3, [pc, #44]	; (8008b48 <xPortStartScheduler+0xe0>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b20:	f7ff ff92 	bl	8008a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b24:	f7ff fd7c 	bl	8008620 <vTaskSwitchContext>
	prvTaskExitError();
 8008b28:	f7ff ff4c 	bl	80089c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	e000e400 	.word	0xe000e400
 8008b3c:	2000070c 	.word	0x2000070c
 8008b40:	20000710 	.word	0x20000710
 8008b44:	e000ed20 	.word	0xe000ed20
 8008b48:	20000070 	.word	0x20000070

08008b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	607b      	str	r3, [r7, #4]
}
 8008b64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <vPortEnterCritical+0x58>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <vPortEnterCritical+0x58>)
 8008b6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b70:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <vPortEnterCritical+0x58>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d10f      	bne.n	8008b98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b78:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <vPortEnterCritical+0x5c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	603b      	str	r3, [r7, #0]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <vPortEnterCritical+0x4a>
	}
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20000070 	.word	0x20000070
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bb2:	4b11      	ldr	r3, [pc, #68]	; (8008bf8 <vPortExitCritical+0x4c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10a      	bne.n	8008bd0 <vPortExitCritical+0x24>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	607b      	str	r3, [r7, #4]
}
 8008bcc:	bf00      	nop
 8008bce:	e7fe      	b.n	8008bce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <vPortExitCritical+0x4c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <vPortExitCritical+0x4c>)
 8008bd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bda:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <vPortExitCritical+0x4c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d105      	bne.n	8008bee <vPortExitCritical+0x42>
 8008be2:	2300      	movs	r3, #0
 8008be4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bee:	bf00      	nop
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bc80      	pop	{r7}
 8008bf6:	4770      	bx	lr
 8008bf8:	20000070 	.word	0x20000070
 8008bfc:	00000000 	.word	0x00000000

08008c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c00:	f3ef 8009 	mrs	r0, PSP
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <pxCurrentTCBConst>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c10:	6010      	str	r0, [r2, #0]
 8008c12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c1a:	f380 8811 	msr	BASEPRI, r0
 8008c1e:	f7ff fcff 	bl	8008620 <vTaskSwitchContext>
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f380 8811 	msr	BASEPRI, r0
 8008c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c2e:	6819      	ldr	r1, [r3, #0]
 8008c30:	6808      	ldr	r0, [r1, #0]
 8008c32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c36:	f380 8809 	msr	PSP, r0
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	4770      	bx	lr

08008c40 <pxCurrentTCBConst>:
 8008c40:	200005e0 	.word	0x200005e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop

08008c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	607b      	str	r3, [r7, #4]
}
 8008c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c62:	f7ff fc1f 	bl	80084a4 <xTaskIncrementTick>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <SysTick_Handler+0x40>)
 8008c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	2300      	movs	r3, #0
 8008c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f383 8811 	msr	BASEPRI, r3
}
 8008c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c90:	4b0a      	ldr	r3, [pc, #40]	; (8008cbc <vPortSetupTimerInterrupt+0x30>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c96:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <vPortSetupTimerInterrupt+0x34>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c9c:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <vPortSetupTimerInterrupt+0x38>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a09      	ldr	r2, [pc, #36]	; (8008cc8 <vPortSetupTimerInterrupt+0x3c>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	099b      	lsrs	r3, r3, #6
 8008ca8:	4a08      	ldr	r2, [pc, #32]	; (8008ccc <vPortSetupTimerInterrupt+0x40>)
 8008caa:	3b01      	subs	r3, #1
 8008cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cae:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <vPortSetupTimerInterrupt+0x30>)
 8008cb0:	2207      	movs	r2, #7
 8008cb2:	601a      	str	r2, [r3, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr
 8008cbc:	e000e010 	.word	0xe000e010
 8008cc0:	e000e018 	.word	0xe000e018
 8008cc4:	20000000 	.word	0x20000000
 8008cc8:	10624dd3 	.word	0x10624dd3
 8008ccc:	e000e014 	.word	0xe000e014

08008cd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08a      	sub	sp, #40	; 0x28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cdc:	f7ff fb38 	bl	8008350 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ce0:	4b58      	ldr	r3, [pc, #352]	; (8008e44 <pvPortMalloc+0x174>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ce8:	f000 f910 	bl	8008f0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cec:	4b56      	ldr	r3, [pc, #344]	; (8008e48 <pvPortMalloc+0x178>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f040 808e 	bne.w	8008e16 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01d      	beq.n	8008d3c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d00:	2208      	movs	r2, #8
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d014      	beq.n	8008d3c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f023 0307 	bic.w	r3, r3, #7
 8008d18:	3308      	adds	r3, #8
 8008d1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f003 0307 	and.w	r3, r3, #7
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <pvPortMalloc+0x6c>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	617b      	str	r3, [r7, #20]
}
 8008d38:	bf00      	nop
 8008d3a:	e7fe      	b.n	8008d3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d069      	beq.n	8008e16 <pvPortMalloc+0x146>
 8008d42:	4b42      	ldr	r3, [pc, #264]	; (8008e4c <pvPortMalloc+0x17c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d864      	bhi.n	8008e16 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d4c:	4b40      	ldr	r3, [pc, #256]	; (8008e50 <pvPortMalloc+0x180>)
 8008d4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d50:	4b3f      	ldr	r3, [pc, #252]	; (8008e50 <pvPortMalloc+0x180>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d56:	e004      	b.n	8008d62 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d903      	bls.n	8008d74 <pvPortMalloc+0xa4>
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1f1      	bne.n	8008d58 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d74:	4b33      	ldr	r3, [pc, #204]	; (8008e44 <pvPortMalloc+0x174>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d04b      	beq.n	8008e16 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2208      	movs	r2, #8
 8008d84:	4413      	add	r3, r2
 8008d86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	2308      	movs	r3, #8
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d91f      	bls.n	8008de0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	f003 0307 	and.w	r3, r3, #7
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <pvPortMalloc+0xf8>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	613b      	str	r3, [r7, #16]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad2      	subs	r2, r2, r3
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008dda:	69b8      	ldr	r0, [r7, #24]
 8008ddc:	f000 f8f8 	bl	8008fd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008de0:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <pvPortMalloc+0x17c>)
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	4a18      	ldr	r2, [pc, #96]	; (8008e4c <pvPortMalloc+0x17c>)
 8008dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dee:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <pvPortMalloc+0x17c>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b18      	ldr	r3, [pc, #96]	; (8008e54 <pvPortMalloc+0x184>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d203      	bcs.n	8008e02 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <pvPortMalloc+0x17c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a15      	ldr	r2, [pc, #84]	; (8008e54 <pvPortMalloc+0x184>)
 8008e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	4b10      	ldr	r3, [pc, #64]	; (8008e48 <pvPortMalloc+0x178>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e16:	f7ff faa9 	bl	800836c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <pvPortMalloc+0x16a>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60fb      	str	r3, [r7, #12]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <pvPortMalloc+0x168>
	return pvReturn;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3728      	adds	r7, #40	; 0x28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	2000131c 	.word	0x2000131c
 8008e48:	20001328 	.word	0x20001328
 8008e4c:	20001320 	.word	0x20001320
 8008e50:	20001314 	.word	0x20001314
 8008e54:	20001324 	.word	0x20001324

08008e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d048      	beq.n	8008efc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	425b      	negs	r3, r3
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4413      	add	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b21      	ldr	r3, [pc, #132]	; (8008f04 <vPortFree+0xac>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4013      	ands	r3, r2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <vPortFree+0x44>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	60fb      	str	r3, [r7, #12]
}
 8008e98:	bf00      	nop
 8008e9a:	e7fe      	b.n	8008e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00a      	beq.n	8008eba <vPortFree+0x62>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60bb      	str	r3, [r7, #8]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	4b11      	ldr	r3, [pc, #68]	; (8008f04 <vPortFree+0xac>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d019      	beq.n	8008efc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d115      	bne.n	8008efc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <vPortFree+0xac>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	401a      	ands	r2, r3
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ee0:	f7ff fa36 	bl	8008350 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	4b07      	ldr	r3, [pc, #28]	; (8008f08 <vPortFree+0xb0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4413      	add	r3, r2
 8008eee:	4a06      	ldr	r2, [pc, #24]	; (8008f08 <vPortFree+0xb0>)
 8008ef0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ef2:	6938      	ldr	r0, [r7, #16]
 8008ef4:	f000 f86c 	bl	8008fd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ef8:	f7ff fa38 	bl	800836c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008efc:	bf00      	nop
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20001328 	.word	0x20001328
 8008f08:	20001320 	.word	0x20001320

08008f0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f18:	4b27      	ldr	r3, [pc, #156]	; (8008fb8 <prvHeapInit+0xac>)
 8008f1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00c      	beq.n	8008f40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3307      	adds	r3, #7
 8008f2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0307 	bic.w	r3, r3, #7
 8008f32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	4a1f      	ldr	r2, [pc, #124]	; (8008fb8 <prvHeapInit+0xac>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f44:	4a1d      	ldr	r2, [pc, #116]	; (8008fbc <prvHeapInit+0xb0>)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f4a:	4b1c      	ldr	r3, [pc, #112]	; (8008fbc <prvHeapInit+0xb0>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4413      	add	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f58:	2208      	movs	r2, #8
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0307 	bic.w	r3, r3, #7
 8008f66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4a15      	ldr	r2, [pc, #84]	; (8008fc0 <prvHeapInit+0xb4>)
 8008f6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f6e:	4b14      	ldr	r3, [pc, #80]	; (8008fc0 <prvHeapInit+0xb4>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2200      	movs	r2, #0
 8008f74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f76:	4b12      	ldr	r3, [pc, #72]	; (8008fc0 <prvHeapInit+0xb4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <prvHeapInit+0xb4>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4a0a      	ldr	r2, [pc, #40]	; (8008fc4 <prvHeapInit+0xb8>)
 8008f9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a09      	ldr	r2, [pc, #36]	; (8008fc8 <prvHeapInit+0xbc>)
 8008fa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fa4:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <prvHeapInit+0xc0>)
 8008fa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008faa:	601a      	str	r2, [r3, #0]
}
 8008fac:	bf00      	nop
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bc80      	pop	{r7}
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000714 	.word	0x20000714
 8008fbc:	20001314 	.word	0x20001314
 8008fc0:	2000131c 	.word	0x2000131c
 8008fc4:	20001324 	.word	0x20001324
 8008fc8:	20001320 	.word	0x20001320
 8008fcc:	20001328 	.word	0x20001328

08008fd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fd8:	4b27      	ldr	r3, [pc, #156]	; (8009078 <prvInsertBlockIntoFreeList+0xa8>)
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	e002      	b.n	8008fe4 <prvInsertBlockIntoFreeList+0x14>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d8f7      	bhi.n	8008fde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d108      	bne.n	8009012 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	441a      	add	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	441a      	add	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d118      	bne.n	8009058 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b14      	ldr	r3, [pc, #80]	; (800907c <prvInsertBlockIntoFreeList+0xac>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d00d      	beq.n	800904e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	441a      	add	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	e008      	b.n	8009060 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800904e:	4b0b      	ldr	r3, [pc, #44]	; (800907c <prvInsertBlockIntoFreeList+0xac>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	e003      	b.n	8009060 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d002      	beq.n	800906e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800906e:	bf00      	nop
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	bc80      	pop	{r7}
 8009076:	4770      	bx	lr
 8009078:	20001314 	.word	0x20001314
 800907c:	2000131c 	.word	0x2000131c

08009080 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009084:	2200      	movs	r2, #0
 8009086:	4912      	ldr	r1, [pc, #72]	; (80090d0 <MX_USB_DEVICE_Init+0x50>)
 8009088:	4812      	ldr	r0, [pc, #72]	; (80090d4 <MX_USB_DEVICE_Init+0x54>)
 800908a:	f7fd fd33 	bl	8006af4 <USBD_Init>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009094:	f7f7 fa04 	bl	80004a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8009098:	490f      	ldr	r1, [pc, #60]	; (80090d8 <MX_USB_DEVICE_Init+0x58>)
 800909a:	480e      	ldr	r0, [pc, #56]	; (80090d4 <MX_USB_DEVICE_Init+0x54>)
 800909c:	f7fd fd55 	bl	8006b4a <USBD_RegisterClass>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090a6:	f7f7 f9fb 	bl	80004a0 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 80090aa:	490c      	ldr	r1, [pc, #48]	; (80090dc <MX_USB_DEVICE_Init+0x5c>)
 80090ac:	4809      	ldr	r0, [pc, #36]	; (80090d4 <MX_USB_DEVICE_Init+0x54>)
 80090ae:	f7fd f9bd 	bl	800642c <USBD_DFU_RegisterMedia>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090b8:	f7f7 f9f2 	bl	80004a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090bc:	4805      	ldr	r0, [pc, #20]	; (80090d4 <MX_USB_DEVICE_Init+0x54>)
 80090be:	f7fd fd5d 	bl	8006b7c <USBD_Start>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090c8:	f7f7 f9ea 	bl	80004a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090cc:	bf00      	nop
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20000074 	.word	0x20000074
 80090d4:	2000132c 	.word	0x2000132c
 80090d8:	2000000c 	.word	0x2000000c
 80090dc:	200000c4 	.word	0x200000c4

080090e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2212      	movs	r2, #18
 80090f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090f2:	4b03      	ldr	r3, [pc, #12]	; (8009100 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000090 	.word	0x20000090

08009104 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2204      	movs	r2, #4
 8009114:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009116:	4b03      	ldr	r3, [pc, #12]	; (8009124 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	200000a4 	.word	0x200000a4

08009128 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	4907      	ldr	r1, [pc, #28]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
 800913e:	4808      	ldr	r0, [pc, #32]	; (8009160 <USBD_FS_ProductStrDescriptor+0x38>)
 8009140:	f7fe fcbc 	bl	8007abc <USBD_GetString>
 8009144:	e004      	b.n	8009150 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	4904      	ldr	r1, [pc, #16]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
 800914a:	4805      	ldr	r0, [pc, #20]	; (8009160 <USBD_FS_ProductStrDescriptor+0x38>)
 800914c:	f7fe fcb6 	bl	8007abc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009150:	4b02      	ldr	r3, [pc, #8]	; (800915c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	200015f0 	.word	0x200015f0
 8009160:	08009abc 	.word	0x08009abc

08009164 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	4904      	ldr	r1, [pc, #16]	; (8009184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009174:	4804      	ldr	r0, [pc, #16]	; (8009188 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009176:	f7fe fca1 	bl	8007abc <USBD_GetString>
  return USBD_StrDesc;
 800917a:	4b02      	ldr	r3, [pc, #8]	; (8009184 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	200015f0 	.word	0x200015f0
 8009188:	08009adc 	.word	0x08009adc

0800918c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	221a      	movs	r2, #26
 800919c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800919e:	f000 f843 	bl	8009228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091a2:	4b02      	ldr	r3, [pc, #8]	; (80091ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	200000a8 	.word	0x200000a8

080091b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4907      	ldr	r1, [pc, #28]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091c6:	4808      	ldr	r0, [pc, #32]	; (80091e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091c8:	f7fe fc78 	bl	8007abc <USBD_GetString>
 80091cc:	e004      	b.n	80091d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	4904      	ldr	r1, [pc, #16]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091d4:	f7fe fc72 	bl	8007abc <USBD_GetString>
  }
  return USBD_StrDesc;
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	200015f0 	.word	0x200015f0
 80091e8:	08009af0 	.word	0x08009af0

080091ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d105      	bne.n	800920a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	4907      	ldr	r1, [pc, #28]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009202:	4808      	ldr	r0, [pc, #32]	; (8009224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009204:	f7fe fc5a 	bl	8007abc <USBD_GetString>
 8009208:	e004      	b.n	8009214 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	4904      	ldr	r1, [pc, #16]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800920e:	4805      	ldr	r0, [pc, #20]	; (8009224 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009210:	f7fe fc54 	bl	8007abc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	200015f0 	.word	0x200015f0
 8009224:	08009afc 	.word	0x08009afc

08009228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800922e:	4b0f      	ldr	r3, [pc, #60]	; (800926c <Get_SerialNum+0x44>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009234:	4b0e      	ldr	r3, [pc, #56]	; (8009270 <Get_SerialNum+0x48>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <Get_SerialNum+0x4c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4413      	add	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800924e:	2208      	movs	r2, #8
 8009250:	4909      	ldr	r1, [pc, #36]	; (8009278 <Get_SerialNum+0x50>)
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 f814 	bl	8009280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009258:	2204      	movs	r2, #4
 800925a:	4908      	ldr	r1, [pc, #32]	; (800927c <Get_SerialNum+0x54>)
 800925c:	68b8      	ldr	r0, [r7, #8]
 800925e:	f000 f80f 	bl	8009280 <IntToUnicode>
  }
}
 8009262:	bf00      	nop
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	1ffff7e8 	.word	0x1ffff7e8
 8009270:	1ffff7ec 	.word	0x1ffff7ec
 8009274:	1ffff7f0 	.word	0x1ffff7f0
 8009278:	200000aa 	.word	0x200000aa
 800927c:	200000ba 	.word	0x200000ba

08009280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	4613      	mov	r3, r2
 800928c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009292:	2300      	movs	r3, #0
 8009294:	75fb      	strb	r3, [r7, #23]
 8009296:	e027      	b.n	80092e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	0f1b      	lsrs	r3, r3, #28
 800929c:	2b09      	cmp	r3, #9
 800929e:	d80b      	bhi.n	80092b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	0f1b      	lsrs	r3, r3, #28
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	4619      	mov	r1, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	440b      	add	r3, r1
 80092b0:	3230      	adds	r2, #48	; 0x30
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	e00a      	b.n	80092ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	0f1b      	lsrs	r3, r3, #28
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	7dfb      	ldrb	r3, [r7, #23]
 80092c0:	005b      	lsls	r3, r3, #1
 80092c2:	4619      	mov	r1, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	440b      	add	r3, r1
 80092c8:	3237      	adds	r2, #55	; 0x37
 80092ca:	b2d2      	uxtb	r2, r2
 80092cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	011b      	lsls	r3, r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	3301      	adds	r3, #1
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	4413      	add	r3, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	3301      	adds	r3, #1
 80092e6:	75fb      	strb	r3, [r7, #23]
 80092e8:	7dfa      	ldrb	r2, [r7, #23]
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d3d3      	bcc.n	8009298 <IntToUnicode+0x18>
  }
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr

080092fc <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8009300:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8009302:	4618      	mov	r0, r3
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr

0800930a <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 800930a:	b480      	push	{r7}
 800930c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 800930e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8009310:	4618      	mov	r0, r3
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr

08009318 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8009320:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8009338:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8009350:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	460b      	mov	r3, r1
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800936e:	bf00      	nop
  }
  return (USBD_OK);
 8009370:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a0d      	ldr	r2, [pc, #52]	; (80093c0 <HAL_PCD_MspInit+0x44>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d113      	bne.n	80093b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <HAL_PCD_MspInit+0x48>)
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	4a0c      	ldr	r2, [pc, #48]	; (80093c4 <HAL_PCD_MspInit+0x48>)
 8009394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009398:	61d3      	str	r3, [r2, #28]
 800939a:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <HAL_PCD_MspInit+0x48>)
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80093a6:	2200      	movs	r2, #0
 80093a8:	2105      	movs	r1, #5
 80093aa:	2014      	movs	r0, #20
 80093ac:	f7f7 fb1f 	bl	80009ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80093b0:	2014      	movs	r0, #20
 80093b2:	f7f7 fb38 	bl	8000a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	40005c00 	.word	0x40005c00
 80093c4:	40021000 	.word	0x40021000

080093c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80093dc:	4619      	mov	r1, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	f7fd fc2a 	bl	8006c38 <USBD_LL_SetupStage>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80093fe:	78fa      	ldrb	r2, [r7, #3]
 8009400:	6879      	ldr	r1, [r7, #4]
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	00db      	lsls	r3, r3, #3
 800940a:	440b      	add	r3, r1
 800940c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	4619      	mov	r1, r3
 8009416:	f7fd fc5c 	bl	8006cd2 <USBD_LL_DataOutStage>
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	440b      	add	r3, r1
 8009442:	333c      	adds	r3, #60	; 0x3c
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	4619      	mov	r1, r3
 800944a:	f7fd fcb3 	bl	8006db4 <USBD_LL_DataInStage>
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009464:	4618      	mov	r0, r3
 8009466:	f7fd fdc3 	bl	8006ff0 <USBD_LL_SOF>
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800947a:	2301      	movs	r3, #1
 800947c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2b02      	cmp	r3, #2
 8009484:	d001      	beq.n	800948a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009486:	f7f7 f80b 	bl	80004a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009490:	7bfa      	ldrb	r2, [r7, #15]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd fd73 	bl	8006f80 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fd fd2c 	bl	8006efe <USBD_LL_Reset>
}
 80094a6:	bf00      	nop
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fd fd6d 	bl	8006f9e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094cc:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <HAL_PCD_SuspendCallback+0x30>)
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	4a03      	ldr	r2, [pc, #12]	; (80094e0 <HAL_PCD_SuspendCallback+0x30>)
 80094d2:	f043 0306 	orr.w	r3, r3, #6
 80094d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	e000ed00 	.word	0xe000ed00

080094e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fd fd67 	bl	8006fc6 <USBD_LL_Resume>
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009508:	4a1b      	ldr	r2, [pc, #108]	; (8009578 <USBD_LL_Init+0x78>)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a19      	ldr	r2, [pc, #100]	; (8009578 <USBD_LL_Init+0x78>)
 8009514:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009518:	4b17      	ldr	r3, [pc, #92]	; (8009578 <USBD_LL_Init+0x78>)
 800951a:	4a18      	ldr	r2, [pc, #96]	; (800957c <USBD_LL_Init+0x7c>)
 800951c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800951e:	4b16      	ldr	r3, [pc, #88]	; (8009578 <USBD_LL_Init+0x78>)
 8009520:	2208      	movs	r2, #8
 8009522:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009524:	4b14      	ldr	r3, [pc, #80]	; (8009578 <USBD_LL_Init+0x78>)
 8009526:	2202      	movs	r2, #2
 8009528:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800952a:	4b13      	ldr	r3, [pc, #76]	; (8009578 <USBD_LL_Init+0x78>)
 800952c:	2200      	movs	r2, #0
 800952e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009530:	4b11      	ldr	r3, [pc, #68]	; (8009578 <USBD_LL_Init+0x78>)
 8009532:	2200      	movs	r2, #0
 8009534:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009536:	4b10      	ldr	r3, [pc, #64]	; (8009578 <USBD_LL_Init+0x78>)
 8009538:	2200      	movs	r2, #0
 800953a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800953c:	480e      	ldr	r0, [pc, #56]	; (8009578 <USBD_LL_Init+0x78>)
 800953e:	f7f7 fd7b 	bl	8001038 <HAL_PCD_Init>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009548:	f7f6 ffaa 	bl	80004a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009552:	2318      	movs	r3, #24
 8009554:	2200      	movs	r2, #0
 8009556:	2100      	movs	r1, #0
 8009558:	f7f9 fa61 	bl	8002a1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009562:	2358      	movs	r3, #88	; 0x58
 8009564:	2200      	movs	r2, #0
 8009566:	2180      	movs	r1, #128	; 0x80
 8009568:	f7f9 fa59 	bl	8002a1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	200017f0 	.word	0x200017f0
 800957c:	40005c00 	.word	0x40005c00

08009580 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009596:	4618      	mov	r0, r3
 8009598:	f7f7 fe4d 	bl	8001236 <HAL_PCD_Start>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f000 f938 	bl	8009818 <USBD_Get_USB_Status>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f7 fe58 	bl	8001282 <HAL_PCD_Stop>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f91d 	bl	8009818 <USBD_Get_USB_Status>
 80095de:	4603      	mov	r3, r0
 80095e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	4608      	mov	r0, r1
 80095f6:	4611      	mov	r1, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	4603      	mov	r3, r0
 80095fc:	70fb      	strb	r3, [r7, #3]
 80095fe:	460b      	mov	r3, r1
 8009600:	70bb      	strb	r3, [r7, #2]
 8009602:	4613      	mov	r3, r2
 8009604:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009614:	78bb      	ldrb	r3, [r7, #2]
 8009616:	883a      	ldrh	r2, [r7, #0]
 8009618:	78f9      	ldrb	r1, [r7, #3]
 800961a:	f7f7 ffad 	bl	8001578 <HAL_PCD_EP_Open>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	4618      	mov	r0, r3
 8009626:	f000 f8f7 	bl	8009818 <USBD_Get_USB_Status>
 800962a:	4603      	mov	r3, r0
 800962c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009652:	78fa      	ldrb	r2, [r7, #3]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7f8 f853 	bl	8001702 <HAL_PCD_EP_SetStall>
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	4618      	mov	r0, r3
 8009664:	f000 f8d8 	bl	8009818 <USBD_Get_USB_Status>
 8009668:	4603      	mov	r3, r0
 800966a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966c:	7bbb      	ldrb	r3, [r7, #14]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f7f8 f894 	bl	80017c2 <HAL_PCD_EP_ClrStall>
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f8b9 	bl	8009818 <USBD_Get_USB_Status>
 80096a6:	4603      	mov	r3, r0
 80096a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	da0c      	bge.n	80096ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	440b      	add	r3, r1
 80096e4:	3302      	adds	r3, #2
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	e00b      	b.n	8009702 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	440b      	add	r3, r1
 80096fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009700:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr

0800970c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7f7 feff 	bl	800152e <HAL_PCD_SetAddress>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f86e 	bl	8009818 <USBD_Get_USB_Status>
 800973c:	4603      	mov	r3, r0
 800973e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009740:	7bbb      	ldrb	r3, [r7, #14]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	461a      	mov	r2, r3
 8009756:	460b      	mov	r3, r1
 8009758:	72fb      	strb	r3, [r7, #11]
 800975a:	4613      	mov	r3, r2
 800975c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800976c:	893b      	ldrh	r3, [r7, #8]
 800976e:	7af9      	ldrb	r1, [r7, #11]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	f7f7 ff8f 	bl	8001694 <HAL_PCD_EP_Transmit>
 8009776:	4603      	mov	r3, r0
 8009778:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f84b 	bl	8009818 <USBD_Get_USB_Status>
 8009782:	4603      	mov	r3, r0
 8009784:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009786:	7dbb      	ldrb	r3, [r7, #22]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3718      	adds	r7, #24
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	607a      	str	r2, [r7, #4]
 800979a:	461a      	mov	r2, r3
 800979c:	460b      	mov	r3, r1
 800979e:	72fb      	strb	r3, [r7, #11]
 80097a0:	4613      	mov	r3, r2
 80097a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097b2:	893b      	ldrh	r3, [r7, #8]
 80097b4:	7af9      	ldrb	r1, [r7, #11]
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	f7f7 ff3b 	bl	8001632 <HAL_PCD_EP_Receive>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f828 	bl	8009818 <USBD_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
	...

080097d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <USBD_static_malloc+0x14>)
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bc80      	pop	{r7}
 80097ea:	4770      	bx	lr
 80097ec:	20001ae0 	.word	0x20001ae0

080097f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]

}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bc80      	pop	{r7}
 8009800:	4770      	bx	lr

08009802 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009802:	b480      	push	{r7}
 8009804:	b083      	sub	sp, #12
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800980e:	bf00      	nop
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	bc80      	pop	{r7}
 8009816:	4770      	bx	lr

08009818 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	2b03      	cmp	r3, #3
 800982a:	d817      	bhi.n	800985c <USBD_Get_USB_Status+0x44>
 800982c:	a201      	add	r2, pc, #4	; (adr r2, 8009834 <USBD_Get_USB_Status+0x1c>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	08009845 	.word	0x08009845
 8009838:	0800984b 	.word	0x0800984b
 800983c:	08009851 	.word	0x08009851
 8009840:	08009857 	.word	0x08009857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
    break;
 8009848:	e00b      	b.n	8009862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800984a:	2302      	movs	r3, #2
 800984c:	73fb      	strb	r3, [r7, #15]
    break;
 800984e:	e008      	b.n	8009862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009850:	2301      	movs	r3, #1
 8009852:	73fb      	strb	r3, [r7, #15]
    break;
 8009854:	e005      	b.n	8009862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009856:	2302      	movs	r3, #2
 8009858:	73fb      	strb	r3, [r7, #15]
    break;
 800985a:	e002      	b.n	8009862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800985c:	2302      	movs	r3, #2
 800985e:	73fb      	strb	r3, [r7, #15]
    break;
 8009860:	bf00      	nop
  }
  return usb_status;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	bc80      	pop	{r7}
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop

08009870 <memset>:
 8009870:	4603      	mov	r3, r0
 8009872:	4402      	add	r2, r0
 8009874:	4293      	cmp	r3, r2
 8009876:	d100      	bne.n	800987a <memset+0xa>
 8009878:	4770      	bx	lr
 800987a:	f803 1b01 	strb.w	r1, [r3], #1
 800987e:	e7f9      	b.n	8009874 <memset+0x4>

08009880 <_reclaim_reent>:
 8009880:	4b29      	ldr	r3, [pc, #164]	; (8009928 <_reclaim_reent+0xa8>)
 8009882:	b570      	push	{r4, r5, r6, lr}
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4604      	mov	r4, r0
 8009888:	4283      	cmp	r3, r0
 800988a:	d04b      	beq.n	8009924 <_reclaim_reent+0xa4>
 800988c:	69c3      	ldr	r3, [r0, #28]
 800988e:	b143      	cbz	r3, 80098a2 <_reclaim_reent+0x22>
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d144      	bne.n	8009920 <_reclaim_reent+0xa0>
 8009896:	69e3      	ldr	r3, [r4, #28]
 8009898:	6819      	ldr	r1, [r3, #0]
 800989a:	b111      	cbz	r1, 80098a2 <_reclaim_reent+0x22>
 800989c:	4620      	mov	r0, r4
 800989e:	f000 f86b 	bl	8009978 <_free_r>
 80098a2:	6961      	ldr	r1, [r4, #20]
 80098a4:	b111      	cbz	r1, 80098ac <_reclaim_reent+0x2c>
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 f866 	bl	8009978 <_free_r>
 80098ac:	69e1      	ldr	r1, [r4, #28]
 80098ae:	b111      	cbz	r1, 80098b6 <_reclaim_reent+0x36>
 80098b0:	4620      	mov	r0, r4
 80098b2:	f000 f861 	bl	8009978 <_free_r>
 80098b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80098b8:	b111      	cbz	r1, 80098c0 <_reclaim_reent+0x40>
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f85c 	bl	8009978 <_free_r>
 80098c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c2:	b111      	cbz	r1, 80098ca <_reclaim_reent+0x4a>
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 f857 	bl	8009978 <_free_r>
 80098ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80098cc:	b111      	cbz	r1, 80098d4 <_reclaim_reent+0x54>
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 f852 	bl	8009978 <_free_r>
 80098d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80098d6:	b111      	cbz	r1, 80098de <_reclaim_reent+0x5e>
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 f84d 	bl	8009978 <_free_r>
 80098de:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80098e0:	b111      	cbz	r1, 80098e8 <_reclaim_reent+0x68>
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f848 	bl	8009978 <_free_r>
 80098e8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80098ea:	b111      	cbz	r1, 80098f2 <_reclaim_reent+0x72>
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 f843 	bl	8009978 <_free_r>
 80098f2:	6a23      	ldr	r3, [r4, #32]
 80098f4:	b1b3      	cbz	r3, 8009924 <_reclaim_reent+0xa4>
 80098f6:	4620      	mov	r0, r4
 80098f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098fc:	4718      	bx	r3
 80098fe:	5949      	ldr	r1, [r1, r5]
 8009900:	b941      	cbnz	r1, 8009914 <_reclaim_reent+0x94>
 8009902:	3504      	adds	r5, #4
 8009904:	69e3      	ldr	r3, [r4, #28]
 8009906:	2d80      	cmp	r5, #128	; 0x80
 8009908:	68d9      	ldr	r1, [r3, #12]
 800990a:	d1f8      	bne.n	80098fe <_reclaim_reent+0x7e>
 800990c:	4620      	mov	r0, r4
 800990e:	f000 f833 	bl	8009978 <_free_r>
 8009912:	e7c0      	b.n	8009896 <_reclaim_reent+0x16>
 8009914:	680e      	ldr	r6, [r1, #0]
 8009916:	4620      	mov	r0, r4
 8009918:	f000 f82e 	bl	8009978 <_free_r>
 800991c:	4631      	mov	r1, r6
 800991e:	e7ef      	b.n	8009900 <_reclaim_reent+0x80>
 8009920:	2500      	movs	r5, #0
 8009922:	e7ef      	b.n	8009904 <_reclaim_reent+0x84>
 8009924:	bd70      	pop	{r4, r5, r6, pc}
 8009926:	bf00      	nop
 8009928:	2000012c 	.word	0x2000012c

0800992c <__libc_init_array>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	2600      	movs	r6, #0
 8009930:	4d0c      	ldr	r5, [pc, #48]	; (8009964 <__libc_init_array+0x38>)
 8009932:	4c0d      	ldr	r4, [pc, #52]	; (8009968 <__libc_init_array+0x3c>)
 8009934:	1b64      	subs	r4, r4, r5
 8009936:	10a4      	asrs	r4, r4, #2
 8009938:	42a6      	cmp	r6, r4
 800993a:	d109      	bne.n	8009950 <__libc_init_array+0x24>
 800993c:	f000 f870 	bl	8009a20 <_init>
 8009940:	2600      	movs	r6, #0
 8009942:	4d0a      	ldr	r5, [pc, #40]	; (800996c <__libc_init_array+0x40>)
 8009944:	4c0a      	ldr	r4, [pc, #40]	; (8009970 <__libc_init_array+0x44>)
 8009946:	1b64      	subs	r4, r4, r5
 8009948:	10a4      	asrs	r4, r4, #2
 800994a:	42a6      	cmp	r6, r4
 800994c:	d105      	bne.n	800995a <__libc_init_array+0x2e>
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	f855 3b04 	ldr.w	r3, [r5], #4
 8009954:	4798      	blx	r3
 8009956:	3601      	adds	r6, #1
 8009958:	e7ee      	b.n	8009938 <__libc_init_array+0xc>
 800995a:	f855 3b04 	ldr.w	r3, [r5], #4
 800995e:	4798      	blx	r3
 8009960:	3601      	adds	r6, #1
 8009962:	e7f2      	b.n	800994a <__libc_init_array+0x1e>
 8009964:	08009b98 	.word	0x08009b98
 8009968:	08009b98 	.word	0x08009b98
 800996c:	08009b98 	.word	0x08009b98
 8009970:	08009b9c 	.word	0x08009b9c

08009974 <__retarget_lock_acquire_recursive>:
 8009974:	4770      	bx	lr

08009976 <__retarget_lock_release_recursive>:
 8009976:	4770      	bx	lr

08009978 <_free_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4605      	mov	r5, r0
 800997c:	2900      	cmp	r1, #0
 800997e:	d040      	beq.n	8009a02 <_free_r+0x8a>
 8009980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009984:	1f0c      	subs	r4, r1, #4
 8009986:	2b00      	cmp	r3, #0
 8009988:	bfb8      	it	lt
 800998a:	18e4      	addlt	r4, r4, r3
 800998c:	f000 f83c 	bl	8009a08 <__malloc_lock>
 8009990:	4a1c      	ldr	r2, [pc, #112]	; (8009a04 <_free_r+0x8c>)
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	b933      	cbnz	r3, 80099a4 <_free_r+0x2c>
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	6014      	str	r4, [r2, #0]
 800999a:	4628      	mov	r0, r5
 800999c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a0:	f000 b838 	b.w	8009a14 <__malloc_unlock>
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	d908      	bls.n	80099ba <_free_r+0x42>
 80099a8:	6820      	ldr	r0, [r4, #0]
 80099aa:	1821      	adds	r1, r4, r0
 80099ac:	428b      	cmp	r3, r1
 80099ae:	bf01      	itttt	eq
 80099b0:	6819      	ldreq	r1, [r3, #0]
 80099b2:	685b      	ldreq	r3, [r3, #4]
 80099b4:	1809      	addeq	r1, r1, r0
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	e7ed      	b.n	8009996 <_free_r+0x1e>
 80099ba:	461a      	mov	r2, r3
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b10b      	cbz	r3, 80099c4 <_free_r+0x4c>
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d9fa      	bls.n	80099ba <_free_r+0x42>
 80099c4:	6811      	ldr	r1, [r2, #0]
 80099c6:	1850      	adds	r0, r2, r1
 80099c8:	42a0      	cmp	r0, r4
 80099ca:	d10b      	bne.n	80099e4 <_free_r+0x6c>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	4401      	add	r1, r0
 80099d0:	1850      	adds	r0, r2, r1
 80099d2:	4283      	cmp	r3, r0
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	d1e0      	bne.n	800999a <_free_r+0x22>
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	4408      	add	r0, r1
 80099de:	6010      	str	r0, [r2, #0]
 80099e0:	6053      	str	r3, [r2, #4]
 80099e2:	e7da      	b.n	800999a <_free_r+0x22>
 80099e4:	d902      	bls.n	80099ec <_free_r+0x74>
 80099e6:	230c      	movs	r3, #12
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	e7d6      	b.n	800999a <_free_r+0x22>
 80099ec:	6820      	ldr	r0, [r4, #0]
 80099ee:	1821      	adds	r1, r4, r0
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf01      	itttt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	1809      	addeq	r1, r1, r0
 80099fa:	6021      	streq	r1, [r4, #0]
 80099fc:	6063      	str	r3, [r4, #4]
 80099fe:	6054      	str	r4, [r2, #4]
 8009a00:	e7cb      	b.n	800999a <_free_r+0x22>
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	2000203c 	.word	0x2000203c

08009a08 <__malloc_lock>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__malloc_lock+0x8>)
 8009a0a:	f7ff bfb3 	b.w	8009974 <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	20002038 	.word	0x20002038

08009a14 <__malloc_unlock>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__malloc_unlock+0x8>)
 8009a16:	f7ff bfae 	b.w	8009976 <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	20002038 	.word	0x20002038

08009a20 <_init>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	bf00      	nop
 8009a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a26:	bc08      	pop	{r3}
 8009a28:	469e      	mov	lr, r3
 8009a2a:	4770      	bx	lr

08009a2c <_fini>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr
